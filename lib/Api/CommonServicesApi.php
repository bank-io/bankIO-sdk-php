<?php
/**
 * CommonServicesApi
 * PHP version 7.2
 *
 * @category Class
 * @package  BankIO\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * bankIO NextGenPSD2 XS2A Framework
 *
 * # Summary The **NextGenPSD2** *Framework Version 1.3.6* (with errata) offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a PSD2 comlient API in addition to the elements defined in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API has to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space
 *
 * The version of the OpenAPI document: 1.3.6_2020-05-28
 * Contact: info@berlin-group.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BankIO\Sdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BankIO\Sdk\ApiException;
use BankIO\Sdk\Configuration;
use BankIO\Sdk\HeaderSelector;
use BankIO\Sdk\ObjectSerializer;

/**
 * CommonServicesApi Class Doc Comment
 *
 * @category Class
 * @package  BankIO\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class CommonServicesApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation getConsentScaStatus
     *
     * Read the SCA status of the consent authorisation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $consent_id ID of the corresponding consent object as returned by an account information consent request. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BankIO\Sdk\Model\ScaStatusResponse|\BankIO\Sdk\Model\Error400NGAIS|\BankIO\Sdk\Model\Error401NGAIS|\BankIO\Sdk\Model\Error403NGAIS|\BankIO\Sdk\Model\Error404NGAIS|\BankIO\Sdk\Model\Error405NGAIS|\BankIO\Sdk\Model\Error406NGAIS|\BankIO\Sdk\Model\Error409NGAIS|\BankIO\Sdk\Model\Error429NGAIS
     */
    public function getConsentScaStatus($organisation, $consent_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        list($response) = $this->getConsentScaStatusWithHttpInfo($organisation, $consent_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location);
        return $response;
    }

    /**
     * Operation getConsentScaStatusWithHttpInfo
     *
     * Read the SCA status of the consent authorisation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $consent_id ID of the corresponding consent object as returned by an account information consent request. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BankIO\Sdk\Model\ScaStatusResponse|\BankIO\Sdk\Model\Error400NGAIS|\BankIO\Sdk\Model\Error401NGAIS|\BankIO\Sdk\Model\Error403NGAIS|\BankIO\Sdk\Model\Error404NGAIS|\BankIO\Sdk\Model\Error405NGAIS|\BankIO\Sdk\Model\Error406NGAIS|\BankIO\Sdk\Model\Error409NGAIS|\BankIO\Sdk\Model\Error429NGAIS, HTTP status code, HTTP response headers (array of strings)
     */
    public function getConsentScaStatusWithHttpInfo($organisation, $consent_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        $request = $this->getConsentScaStatusRequest($organisation, $consent_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BankIO\Sdk\Model\ScaStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\ScaStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BankIO\Sdk\Model\Error400NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error400NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BankIO\Sdk\Model\Error401NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error401NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BankIO\Sdk\Model\Error403NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error403NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BankIO\Sdk\Model\Error404NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error404NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\BankIO\Sdk\Model\Error405NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error405NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\BankIO\Sdk\Model\Error406NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error406NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\BankIO\Sdk\Model\Error409NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error409NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BankIO\Sdk\Model\Error429NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error429NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BankIO\Sdk\Model\ScaStatusResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\ScaStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error400NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error401NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error403NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error404NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error405NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error406NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error409NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error429NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getConsentScaStatusAsync
     *
     * Read the SCA status of the consent authorisation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $consent_id ID of the corresponding consent object as returned by an account information consent request. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConsentScaStatusAsync($organisation, $consent_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        return $this->getConsentScaStatusAsyncWithHttpInfo($organisation, $consent_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getConsentScaStatusAsyncWithHttpInfo
     *
     * Read the SCA status of the consent authorisation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $consent_id ID of the corresponding consent object as returned by an account information consent request. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getConsentScaStatusAsyncWithHttpInfo($organisation, $consent_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        $returnType = '\BankIO\Sdk\Model\ScaStatusResponse';
        $request = $this->getConsentScaStatusRequest($organisation, $consent_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getConsentScaStatus'
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $consent_id ID of the corresponding consent object as returned by an account information consent request. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getConsentScaStatusRequest($organisation, $consent_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null || (is_array($organisation) && count($organisation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation when calling getConsentScaStatus'
            );
        }
        // verify the required parameter 'consent_id' is set
        if ($consent_id === null || (is_array($consent_id) && count($consent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent_id when calling getConsentScaStatus'
            );
        }
        // verify the required parameter 'authorisation_id' is set
        if ($authorisation_id === null || (is_array($authorisation_id) && count($authorisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorisation_id when calling getConsentScaStatus'
            );
        }
        // verify the required parameter 'x_request_id' is set
        if ($x_request_id === null || (is_array($x_request_id) && count($x_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_request_id when calling getConsentScaStatus'
            );
        }
        if ($psu_geo_location !== null && !preg_match("/GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/", $psu_geo_location)) {
            throw new \InvalidArgumentException("invalid value for \"psu_geo_location\" when calling CommonServicesApi.getConsentScaStatus, must conform to the pattern /GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/.");
        }


        $resourcePath = '/api/org/{organisation}/v1/consents/{consentId}/authorisations/{authorisationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_request_id !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($x_request_id);
        }
        // header params
        if ($digest !== null) {
            $headerParams['Digest'] = ObjectSerializer::toHeaderValue($digest);
        }
        // header params
        if ($signature !== null) {
            $headerParams['Signature'] = ObjectSerializer::toHeaderValue($signature);
        }
        // header params
        if ($tpp_signature_certificate !== null) {
            $headerParams['TPP-Signature-Certificate'] = ObjectSerializer::toHeaderValue($tpp_signature_certificate);
        }
        // header params
        if ($psu_ip_address !== null) {
            $headerParams['PSU-IP-Address'] = ObjectSerializer::toHeaderValue($psu_ip_address);
        }
        // header params
        if ($psu_ip_port !== null) {
            $headerParams['PSU-IP-Port'] = ObjectSerializer::toHeaderValue($psu_ip_port);
        }
        // header params
        if ($psu_accept !== null) {
            $headerParams['PSU-Accept'] = ObjectSerializer::toHeaderValue($psu_accept);
        }
        // header params
        if ($psu_accept_charset !== null) {
            $headerParams['PSU-Accept-Charset'] = ObjectSerializer::toHeaderValue($psu_accept_charset);
        }
        // header params
        if ($psu_accept_encoding !== null) {
            $headerParams['PSU-Accept-Encoding'] = ObjectSerializer::toHeaderValue($psu_accept_encoding);
        }
        // header params
        if ($psu_accept_language !== null) {
            $headerParams['PSU-Accept-Language'] = ObjectSerializer::toHeaderValue($psu_accept_language);
        }
        // header params
        if ($psu_user_agent !== null) {
            $headerParams['PSU-User-Agent'] = ObjectSerializer::toHeaderValue($psu_user_agent);
        }
        // header params
        if ($psu_http_method !== null) {
            $headerParams['PSU-Http-Method'] = ObjectSerializer::toHeaderValue($psu_http_method);
        }
        // header params
        if ($psu_device_id !== null) {
            $headerParams['PSU-Device-ID'] = ObjectSerializer::toHeaderValue($psu_device_id);
        }
        // header params
        if ($psu_geo_location !== null) {
            $headerParams['PSU-Geo-Location'] = ObjectSerializer::toHeaderValue($psu_geo_location);
        }

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                '{' . 'organisation' . '}',
                ObjectSerializer::toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($consent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'consentId' . '}',
                ObjectSerializer::toPathValue($consent_id),
                $resourcePath
            );
        }
        // path params
        if ($authorisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'authorisationId' . '}',
                ObjectSerializer::toPathValue($authorisation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json', ]
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json', ],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentCancellationScaStatus
     *
     * Read the SCA status of the payment cancellation's authorisation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BankIO\Sdk\Model\ScaStatusResponse|\BankIO\Sdk\Model\Error400NGPIS|\BankIO\Sdk\Model\Error401NGPIS|\BankIO\Sdk\Model\Error403NGPIS|\BankIO\Sdk\Model\Error404NGPIS|\BankIO\Sdk\Model\Error405NGPIS|\BankIO\Sdk\Model\Error409NGPIS
     */
    public function getPaymentCancellationScaStatus($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        list($response) = $this->getPaymentCancellationScaStatusWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location);
        return $response;
    }

    /**
     * Operation getPaymentCancellationScaStatusWithHttpInfo
     *
     * Read the SCA status of the payment cancellation's authorisation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BankIO\Sdk\Model\ScaStatusResponse|\BankIO\Sdk\Model\Error400NGPIS|\BankIO\Sdk\Model\Error401NGPIS|\BankIO\Sdk\Model\Error403NGPIS|\BankIO\Sdk\Model\Error404NGPIS|\BankIO\Sdk\Model\Error405NGPIS|\BankIO\Sdk\Model\Error409NGPIS, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentCancellationScaStatusWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        $request = $this->getPaymentCancellationScaStatusRequest($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BankIO\Sdk\Model\ScaStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\ScaStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BankIO\Sdk\Model\Error400NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error400NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BankIO\Sdk\Model\Error401NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error401NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BankIO\Sdk\Model\Error403NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error403NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BankIO\Sdk\Model\Error404NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error404NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\BankIO\Sdk\Model\Error405NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error405NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\BankIO\Sdk\Model\Error409NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error409NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BankIO\Sdk\Model\ScaStatusResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\ScaStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error400NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error401NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error403NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error404NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error405NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error409NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentCancellationScaStatusAsync
     *
     * Read the SCA status of the payment cancellation's authorisation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentCancellationScaStatusAsync($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        return $this->getPaymentCancellationScaStatusAsyncWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentCancellationScaStatusAsyncWithHttpInfo
     *
     * Read the SCA status of the payment cancellation's authorisation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentCancellationScaStatusAsyncWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        $returnType = '\BankIO\Sdk\Model\ScaStatusResponse';
        $request = $this->getPaymentCancellationScaStatusRequest($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentCancellationScaStatus'
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentCancellationScaStatusRequest($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null || (is_array($organisation) && count($organisation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation when calling getPaymentCancellationScaStatus'
            );
        }
        // verify the required parameter 'payment_service' is set
        if ($payment_service === null || (is_array($payment_service) && count($payment_service) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_service when calling getPaymentCancellationScaStatus'
            );
        }
        // verify the required parameter 'payment_product' is set
        if ($payment_product === null || (is_array($payment_product) && count($payment_product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_product when calling getPaymentCancellationScaStatus'
            );
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling getPaymentCancellationScaStatus'
            );
        }
        // verify the required parameter 'authorisation_id' is set
        if ($authorisation_id === null || (is_array($authorisation_id) && count($authorisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorisation_id when calling getPaymentCancellationScaStatus'
            );
        }
        // verify the required parameter 'x_request_id' is set
        if ($x_request_id === null || (is_array($x_request_id) && count($x_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_request_id when calling getPaymentCancellationScaStatus'
            );
        }
        if ($psu_geo_location !== null && !preg_match("/GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/", $psu_geo_location)) {
            throw new \InvalidArgumentException("invalid value for \"psu_geo_location\" when calling CommonServicesApi.getPaymentCancellationScaStatus, must conform to the pattern /GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/.");
        }


        $resourcePath = '/api/org/{organisation}/v1/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations/{authorisationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_request_id !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($x_request_id);
        }
        // header params
        if ($digest !== null) {
            $headerParams['Digest'] = ObjectSerializer::toHeaderValue($digest);
        }
        // header params
        if ($signature !== null) {
            $headerParams['Signature'] = ObjectSerializer::toHeaderValue($signature);
        }
        // header params
        if ($tpp_signature_certificate !== null) {
            $headerParams['TPP-Signature-Certificate'] = ObjectSerializer::toHeaderValue($tpp_signature_certificate);
        }
        // header params
        if ($psu_ip_address !== null) {
            $headerParams['PSU-IP-Address'] = ObjectSerializer::toHeaderValue($psu_ip_address);
        }
        // header params
        if ($psu_ip_port !== null) {
            $headerParams['PSU-IP-Port'] = ObjectSerializer::toHeaderValue($psu_ip_port);
        }
        // header params
        if ($psu_accept !== null) {
            $headerParams['PSU-Accept'] = ObjectSerializer::toHeaderValue($psu_accept);
        }
        // header params
        if ($psu_accept_charset !== null) {
            $headerParams['PSU-Accept-Charset'] = ObjectSerializer::toHeaderValue($psu_accept_charset);
        }
        // header params
        if ($psu_accept_encoding !== null) {
            $headerParams['PSU-Accept-Encoding'] = ObjectSerializer::toHeaderValue($psu_accept_encoding);
        }
        // header params
        if ($psu_accept_language !== null) {
            $headerParams['PSU-Accept-Language'] = ObjectSerializer::toHeaderValue($psu_accept_language);
        }
        // header params
        if ($psu_user_agent !== null) {
            $headerParams['PSU-User-Agent'] = ObjectSerializer::toHeaderValue($psu_user_agent);
        }
        // header params
        if ($psu_http_method !== null) {
            $headerParams['PSU-Http-Method'] = ObjectSerializer::toHeaderValue($psu_http_method);
        }
        // header params
        if ($psu_device_id !== null) {
            $headerParams['PSU-Device-ID'] = ObjectSerializer::toHeaderValue($psu_device_id);
        }
        // header params
        if ($psu_geo_location !== null) {
            $headerParams['PSU-Geo-Location'] = ObjectSerializer::toHeaderValue($psu_geo_location);
        }

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                '{' . 'organisation' . '}',
                ObjectSerializer::toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($payment_service !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-service' . '}',
                ObjectSerializer::toPathValue($payment_service),
                $resourcePath
            );
        }
        // path params
        if ($payment_product !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-product' . '}',
                ObjectSerializer::toPathValue($payment_product),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }
        // path params
        if ($authorisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'authorisationId' . '}',
                ObjectSerializer::toPathValue($authorisation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json', ]
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json', ],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentInitiationAuthorisation
     *
     * Get payment initiation authorisation sub-resources request
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BankIO\Sdk\Model\Authorisations|\BankIO\Sdk\Model\Error400NGPIS|\BankIO\Sdk\Model\Error401NGPIS|\BankIO\Sdk\Model\Error403NGPIS|\BankIO\Sdk\Model\Error404NGPIS|\BankIO\Sdk\Model\Error405NGPIS|\BankIO\Sdk\Model\Error409NGPIS
     */
    public function getPaymentInitiationAuthorisation($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        list($response) = $this->getPaymentInitiationAuthorisationWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location);
        return $response;
    }

    /**
     * Operation getPaymentInitiationAuthorisationWithHttpInfo
     *
     * Get payment initiation authorisation sub-resources request
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BankIO\Sdk\Model\Authorisations|\BankIO\Sdk\Model\Error400NGPIS|\BankIO\Sdk\Model\Error401NGPIS|\BankIO\Sdk\Model\Error403NGPIS|\BankIO\Sdk\Model\Error404NGPIS|\BankIO\Sdk\Model\Error405NGPIS|\BankIO\Sdk\Model\Error409NGPIS, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentInitiationAuthorisationWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        $request = $this->getPaymentInitiationAuthorisationRequest($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BankIO\Sdk\Model\Authorisations' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Authorisations', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BankIO\Sdk\Model\Error400NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error400NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BankIO\Sdk\Model\Error401NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error401NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BankIO\Sdk\Model\Error403NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error403NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BankIO\Sdk\Model\Error404NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error404NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\BankIO\Sdk\Model\Error405NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error405NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\BankIO\Sdk\Model\Error409NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error409NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BankIO\Sdk\Model\Authorisations';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Authorisations',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error400NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error401NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error403NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error404NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error405NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error409NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentInitiationAuthorisationAsync
     *
     * Get payment initiation authorisation sub-resources request
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentInitiationAuthorisationAsync($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        return $this->getPaymentInitiationAuthorisationAsyncWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentInitiationAuthorisationAsyncWithHttpInfo
     *
     * Get payment initiation authorisation sub-resources request
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentInitiationAuthorisationAsyncWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        $returnType = '\BankIO\Sdk\Model\Authorisations';
        $request = $this->getPaymentInitiationAuthorisationRequest($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentInitiationAuthorisation'
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentInitiationAuthorisationRequest($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null || (is_array($organisation) && count($organisation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation when calling getPaymentInitiationAuthorisation'
            );
        }
        // verify the required parameter 'payment_service' is set
        if ($payment_service === null || (is_array($payment_service) && count($payment_service) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_service when calling getPaymentInitiationAuthorisation'
            );
        }
        // verify the required parameter 'payment_product' is set
        if ($payment_product === null || (is_array($payment_product) && count($payment_product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_product when calling getPaymentInitiationAuthorisation'
            );
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling getPaymentInitiationAuthorisation'
            );
        }
        // verify the required parameter 'x_request_id' is set
        if ($x_request_id === null || (is_array($x_request_id) && count($x_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_request_id when calling getPaymentInitiationAuthorisation'
            );
        }
        if ($psu_geo_location !== null && !preg_match("/GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/", $psu_geo_location)) {
            throw new \InvalidArgumentException("invalid value for \"psu_geo_location\" when calling CommonServicesApi.getPaymentInitiationAuthorisation, must conform to the pattern /GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/.");
        }


        $resourcePath = '/api/org/{organisation}/v1/{payment-service}/{payment-product}/{paymentId}/authorisations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_request_id !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($x_request_id);
        }
        // header params
        if ($digest !== null) {
            $headerParams['Digest'] = ObjectSerializer::toHeaderValue($digest);
        }
        // header params
        if ($signature !== null) {
            $headerParams['Signature'] = ObjectSerializer::toHeaderValue($signature);
        }
        // header params
        if ($tpp_signature_certificate !== null) {
            $headerParams['TPP-Signature-Certificate'] = ObjectSerializer::toHeaderValue($tpp_signature_certificate);
        }
        // header params
        if ($psu_ip_address !== null) {
            $headerParams['PSU-IP-Address'] = ObjectSerializer::toHeaderValue($psu_ip_address);
        }
        // header params
        if ($psu_ip_port !== null) {
            $headerParams['PSU-IP-Port'] = ObjectSerializer::toHeaderValue($psu_ip_port);
        }
        // header params
        if ($psu_accept !== null) {
            $headerParams['PSU-Accept'] = ObjectSerializer::toHeaderValue($psu_accept);
        }
        // header params
        if ($psu_accept_charset !== null) {
            $headerParams['PSU-Accept-Charset'] = ObjectSerializer::toHeaderValue($psu_accept_charset);
        }
        // header params
        if ($psu_accept_encoding !== null) {
            $headerParams['PSU-Accept-Encoding'] = ObjectSerializer::toHeaderValue($psu_accept_encoding);
        }
        // header params
        if ($psu_accept_language !== null) {
            $headerParams['PSU-Accept-Language'] = ObjectSerializer::toHeaderValue($psu_accept_language);
        }
        // header params
        if ($psu_user_agent !== null) {
            $headerParams['PSU-User-Agent'] = ObjectSerializer::toHeaderValue($psu_user_agent);
        }
        // header params
        if ($psu_http_method !== null) {
            $headerParams['PSU-Http-Method'] = ObjectSerializer::toHeaderValue($psu_http_method);
        }
        // header params
        if ($psu_device_id !== null) {
            $headerParams['PSU-Device-ID'] = ObjectSerializer::toHeaderValue($psu_device_id);
        }
        // header params
        if ($psu_geo_location !== null) {
            $headerParams['PSU-Geo-Location'] = ObjectSerializer::toHeaderValue($psu_geo_location);
        }

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                '{' . 'organisation' . '}',
                ObjectSerializer::toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($payment_service !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-service' . '}',
                ObjectSerializer::toPathValue($payment_service),
                $resourcePath
            );
        }
        // path params
        if ($payment_product !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-product' . '}',
                ObjectSerializer::toPathValue($payment_product),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json', ]
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json', ],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation getPaymentInitiationScaStatus
     *
     * Read the SCA status of the payment authorisation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BankIO\Sdk\Model\ScaStatusResponse|\BankIO\Sdk\Model\Error400NGPIS|\BankIO\Sdk\Model\Error401NGPIS|\BankIO\Sdk\Model\Error403NGPIS|\BankIO\Sdk\Model\Error404NGPIS|\BankIO\Sdk\Model\Error405NGPIS|\BankIO\Sdk\Model\Error409NGPIS
     */
    public function getPaymentInitiationScaStatus($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        list($response) = $this->getPaymentInitiationScaStatusWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location);
        return $response;
    }

    /**
     * Operation getPaymentInitiationScaStatusWithHttpInfo
     *
     * Read the SCA status of the payment authorisation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BankIO\Sdk\Model\ScaStatusResponse|\BankIO\Sdk\Model\Error400NGPIS|\BankIO\Sdk\Model\Error401NGPIS|\BankIO\Sdk\Model\Error403NGPIS|\BankIO\Sdk\Model\Error404NGPIS|\BankIO\Sdk\Model\Error405NGPIS|\BankIO\Sdk\Model\Error409NGPIS, HTTP status code, HTTP response headers (array of strings)
     */
    public function getPaymentInitiationScaStatusWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        $request = $this->getPaymentInitiationScaStatusRequest($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BankIO\Sdk\Model\ScaStatusResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\ScaStatusResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BankIO\Sdk\Model\Error400NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error400NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BankIO\Sdk\Model\Error401NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error401NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BankIO\Sdk\Model\Error403NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error403NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BankIO\Sdk\Model\Error404NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error404NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\BankIO\Sdk\Model\Error405NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error405NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\BankIO\Sdk\Model\Error409NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error409NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BankIO\Sdk\Model\ScaStatusResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\ScaStatusResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error400NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error401NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error403NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error404NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error405NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error409NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation getPaymentInitiationScaStatusAsync
     *
     * Read the SCA status of the payment authorisation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentInitiationScaStatusAsync($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        return $this->getPaymentInitiationScaStatusAsyncWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation getPaymentInitiationScaStatusAsyncWithHttpInfo
     *
     * Read the SCA status of the payment authorisation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function getPaymentInitiationScaStatusAsyncWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        $returnType = '\BankIO\Sdk\Model\ScaStatusResponse';
        $request = $this->getPaymentInitiationScaStatusRequest($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'getPaymentInitiationScaStatus'
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function getPaymentInitiationScaStatusRequest($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null || (is_array($organisation) && count($organisation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation when calling getPaymentInitiationScaStatus'
            );
        }
        // verify the required parameter 'payment_service' is set
        if ($payment_service === null || (is_array($payment_service) && count($payment_service) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_service when calling getPaymentInitiationScaStatus'
            );
        }
        // verify the required parameter 'payment_product' is set
        if ($payment_product === null || (is_array($payment_product) && count($payment_product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_product when calling getPaymentInitiationScaStatus'
            );
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling getPaymentInitiationScaStatus'
            );
        }
        // verify the required parameter 'authorisation_id' is set
        if ($authorisation_id === null || (is_array($authorisation_id) && count($authorisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorisation_id when calling getPaymentInitiationScaStatus'
            );
        }
        // verify the required parameter 'x_request_id' is set
        if ($x_request_id === null || (is_array($x_request_id) && count($x_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_request_id when calling getPaymentInitiationScaStatus'
            );
        }
        if ($psu_geo_location !== null && !preg_match("/GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/", $psu_geo_location)) {
            throw new \InvalidArgumentException("invalid value for \"psu_geo_location\" when calling CommonServicesApi.getPaymentInitiationScaStatus, must conform to the pattern /GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/.");
        }


        $resourcePath = '/api/org/{organisation}/v1/{payment-service}/{payment-product}/{paymentId}/authorisations/{authorisationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_request_id !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($x_request_id);
        }
        // header params
        if ($digest !== null) {
            $headerParams['Digest'] = ObjectSerializer::toHeaderValue($digest);
        }
        // header params
        if ($signature !== null) {
            $headerParams['Signature'] = ObjectSerializer::toHeaderValue($signature);
        }
        // header params
        if ($tpp_signature_certificate !== null) {
            $headerParams['TPP-Signature-Certificate'] = ObjectSerializer::toHeaderValue($tpp_signature_certificate);
        }
        // header params
        if ($psu_ip_address !== null) {
            $headerParams['PSU-IP-Address'] = ObjectSerializer::toHeaderValue($psu_ip_address);
        }
        // header params
        if ($psu_ip_port !== null) {
            $headerParams['PSU-IP-Port'] = ObjectSerializer::toHeaderValue($psu_ip_port);
        }
        // header params
        if ($psu_accept !== null) {
            $headerParams['PSU-Accept'] = ObjectSerializer::toHeaderValue($psu_accept);
        }
        // header params
        if ($psu_accept_charset !== null) {
            $headerParams['PSU-Accept-Charset'] = ObjectSerializer::toHeaderValue($psu_accept_charset);
        }
        // header params
        if ($psu_accept_encoding !== null) {
            $headerParams['PSU-Accept-Encoding'] = ObjectSerializer::toHeaderValue($psu_accept_encoding);
        }
        // header params
        if ($psu_accept_language !== null) {
            $headerParams['PSU-Accept-Language'] = ObjectSerializer::toHeaderValue($psu_accept_language);
        }
        // header params
        if ($psu_user_agent !== null) {
            $headerParams['PSU-User-Agent'] = ObjectSerializer::toHeaderValue($psu_user_agent);
        }
        // header params
        if ($psu_http_method !== null) {
            $headerParams['PSU-Http-Method'] = ObjectSerializer::toHeaderValue($psu_http_method);
        }
        // header params
        if ($psu_device_id !== null) {
            $headerParams['PSU-Device-ID'] = ObjectSerializer::toHeaderValue($psu_device_id);
        }
        // header params
        if ($psu_geo_location !== null) {
            $headerParams['PSU-Geo-Location'] = ObjectSerializer::toHeaderValue($psu_geo_location);
        }

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                '{' . 'organisation' . '}',
                ObjectSerializer::toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($payment_service !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-service' . '}',
                ObjectSerializer::toPathValue($payment_service),
                $resourcePath
            );
        }
        // path params
        if ($payment_product !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-product' . '}',
                ObjectSerializer::toPathValue($payment_product),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }
        // path params
        if ($authorisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'authorisationId' . '}',
                ObjectSerializer::toPathValue($authorisation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json', ]
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json', ],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startConsentAuthorisation
     *
     * Start the authorisation process for a consent
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $consent_id ID of the corresponding consent object as returned by an account information consent request. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  bool $tpp_redirect_preferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. (optional)
     * @param  string $tpp_redirect_uri URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. (optional)
     * @param  string $tpp_nok_redirect_uri If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. (optional)
     * @param  string $tpp_notification_uri URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. (optional)
     * @param  string $tpp_notification_content_preferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BankIO\Sdk\Model\StartScaprocessResponse|\BankIO\Sdk\Model\Error400NGAIS|\BankIO\Sdk\Model\Error401NGAIS|\BankIO\Sdk\Model\Error403NGAIS|\BankIO\Sdk\Model\Error404NGAIS|\BankIO\Sdk\Model\Error405NGAIS|\BankIO\Sdk\Model\Error406NGAIS|\BankIO\Sdk\Model\Error409NGAIS|\BankIO\Sdk\Model\Error429NGAIS
     */
    public function startConsentAuthorisation($organisation, $consent_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $tpp_redirect_preferred = null, $tpp_redirect_uri = null, $tpp_nok_redirect_uri = null, $tpp_notification_uri = null, $tpp_notification_content_preferred = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        list($response) = $this->startConsentAuthorisationWithHttpInfo($organisation, $consent_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $tpp_redirect_preferred, $tpp_redirect_uri, $tpp_nok_redirect_uri, $tpp_notification_uri, $tpp_notification_content_preferred, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);
        return $response;
    }

    /**
     * Operation startConsentAuthorisationWithHttpInfo
     *
     * Start the authorisation process for a consent
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $consent_id ID of the corresponding consent object as returned by an account information consent request. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  bool $tpp_redirect_preferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. (optional)
     * @param  string $tpp_redirect_uri URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. (optional)
     * @param  string $tpp_nok_redirect_uri If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. (optional)
     * @param  string $tpp_notification_uri URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. (optional)
     * @param  string $tpp_notification_content_preferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BankIO\Sdk\Model\StartScaprocessResponse|\BankIO\Sdk\Model\Error400NGAIS|\BankIO\Sdk\Model\Error401NGAIS|\BankIO\Sdk\Model\Error403NGAIS|\BankIO\Sdk\Model\Error404NGAIS|\BankIO\Sdk\Model\Error405NGAIS|\BankIO\Sdk\Model\Error406NGAIS|\BankIO\Sdk\Model\Error409NGAIS|\BankIO\Sdk\Model\Error429NGAIS, HTTP status code, HTTP response headers (array of strings)
     */
    public function startConsentAuthorisationWithHttpInfo($organisation, $consent_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $tpp_redirect_preferred = null, $tpp_redirect_uri = null, $tpp_nok_redirect_uri = null, $tpp_notification_uri = null, $tpp_notification_content_preferred = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        $request = $this->startConsentAuthorisationRequest($organisation, $consent_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $tpp_redirect_preferred, $tpp_redirect_uri, $tpp_nok_redirect_uri, $tpp_notification_uri, $tpp_notification_content_preferred, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\BankIO\Sdk\Model\StartScaprocessResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\StartScaprocessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BankIO\Sdk\Model\Error400NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error400NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BankIO\Sdk\Model\Error401NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error401NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BankIO\Sdk\Model\Error403NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error403NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BankIO\Sdk\Model\Error404NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error404NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\BankIO\Sdk\Model\Error405NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error405NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\BankIO\Sdk\Model\Error406NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error406NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\BankIO\Sdk\Model\Error409NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error409NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BankIO\Sdk\Model\Error429NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error429NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BankIO\Sdk\Model\StartScaprocessResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\StartScaprocessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error400NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error401NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error403NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error404NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error405NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error406NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error409NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error429NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startConsentAuthorisationAsync
     *
     * Start the authorisation process for a consent
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $consent_id ID of the corresponding consent object as returned by an account information consent request. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  bool $tpp_redirect_preferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. (optional)
     * @param  string $tpp_redirect_uri URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. (optional)
     * @param  string $tpp_nok_redirect_uri If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. (optional)
     * @param  string $tpp_notification_uri URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. (optional)
     * @param  string $tpp_notification_content_preferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startConsentAuthorisationAsync($organisation, $consent_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $tpp_redirect_preferred = null, $tpp_redirect_uri = null, $tpp_nok_redirect_uri = null, $tpp_notification_uri = null, $tpp_notification_content_preferred = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        return $this->startConsentAuthorisationAsyncWithHttpInfo($organisation, $consent_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $tpp_redirect_preferred, $tpp_redirect_uri, $tpp_nok_redirect_uri, $tpp_notification_uri, $tpp_notification_content_preferred, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startConsentAuthorisationAsyncWithHttpInfo
     *
     * Start the authorisation process for a consent
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $consent_id ID of the corresponding consent object as returned by an account information consent request. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  bool $tpp_redirect_preferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. (optional)
     * @param  string $tpp_redirect_uri URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. (optional)
     * @param  string $tpp_nok_redirect_uri If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. (optional)
     * @param  string $tpp_notification_uri URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. (optional)
     * @param  string $tpp_notification_content_preferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startConsentAuthorisationAsyncWithHttpInfo($organisation, $consent_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $tpp_redirect_preferred = null, $tpp_redirect_uri = null, $tpp_nok_redirect_uri = null, $tpp_notification_uri = null, $tpp_notification_content_preferred = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        $returnType = '\BankIO\Sdk\Model\StartScaprocessResponse';
        $request = $this->startConsentAuthorisationRequest($organisation, $consent_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $tpp_redirect_preferred, $tpp_redirect_uri, $tpp_nok_redirect_uri, $tpp_notification_uri, $tpp_notification_content_preferred, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startConsentAuthorisation'
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $consent_id ID of the corresponding consent object as returned by an account information consent request. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  bool $tpp_redirect_preferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. (optional)
     * @param  string $tpp_redirect_uri URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. (optional)
     * @param  string $tpp_nok_redirect_uri If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. (optional)
     * @param  string $tpp_notification_uri URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. (optional)
     * @param  string $tpp_notification_content_preferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function startConsentAuthorisationRequest($organisation, $consent_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $tpp_redirect_preferred = null, $tpp_redirect_uri = null, $tpp_nok_redirect_uri = null, $tpp_notification_uri = null, $tpp_notification_content_preferred = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null || (is_array($organisation) && count($organisation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation when calling startConsentAuthorisation'
            );
        }
        // verify the required parameter 'consent_id' is set
        if ($consent_id === null || (is_array($consent_id) && count($consent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent_id when calling startConsentAuthorisation'
            );
        }
        // verify the required parameter 'x_request_id' is set
        if ($x_request_id === null || (is_array($x_request_id) && count($x_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_request_id when calling startConsentAuthorisation'
            );
        }
        if ($psu_geo_location !== null && !preg_match("/GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/", $psu_geo_location)) {
            throw new \InvalidArgumentException("invalid value for \"psu_geo_location\" when calling CommonServicesApi.startConsentAuthorisation, must conform to the pattern /GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/.");
        }


        $resourcePath = '/api/org/{organisation}/v1/consents/{consentId}/authorisations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_request_id !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($x_request_id);
        }
        // header params
        if ($digest !== null) {
            $headerParams['Digest'] = ObjectSerializer::toHeaderValue($digest);
        }
        // header params
        if ($signature !== null) {
            $headerParams['Signature'] = ObjectSerializer::toHeaderValue($signature);
        }
        // header params
        if ($tpp_signature_certificate !== null) {
            $headerParams['TPP-Signature-Certificate'] = ObjectSerializer::toHeaderValue($tpp_signature_certificate);
        }
        // header params
        if ($psu_id !== null) {
            $headerParams['PSU-ID'] = ObjectSerializer::toHeaderValue($psu_id);
        }
        // header params
        if ($psu_id_type !== null) {
            $headerParams['PSU-ID-Type'] = ObjectSerializer::toHeaderValue($psu_id_type);
        }
        // header params
        if ($psu_corporate_id !== null) {
            $headerParams['PSU-Corporate-ID'] = ObjectSerializer::toHeaderValue($psu_corporate_id);
        }
        // header params
        if ($psu_corporate_id_type !== null) {
            $headerParams['PSU-Corporate-ID-Type'] = ObjectSerializer::toHeaderValue($psu_corporate_id_type);
        }
        // header params
        if ($tpp_redirect_preferred !== null) {
            $headerParams['TPP-Redirect-Preferred'] = ObjectSerializer::toHeaderValue($tpp_redirect_preferred);
        }
        // header params
        if ($tpp_redirect_uri !== null) {
            $headerParams['TPP-Redirect-URI'] = ObjectSerializer::toHeaderValue($tpp_redirect_uri);
        }
        // header params
        if ($tpp_nok_redirect_uri !== null) {
            $headerParams['TPP-Nok-Redirect-URI'] = ObjectSerializer::toHeaderValue($tpp_nok_redirect_uri);
        }
        // header params
        if ($tpp_notification_uri !== null) {
            $headerParams['TPP-Notification-URI'] = ObjectSerializer::toHeaderValue($tpp_notification_uri);
        }
        // header params
        if ($tpp_notification_content_preferred !== null) {
            $headerParams['TPP-Notification-Content-Preferred'] = ObjectSerializer::toHeaderValue($tpp_notification_content_preferred);
        }
        // header params
        if ($psu_ip_address !== null) {
            $headerParams['PSU-IP-Address'] = ObjectSerializer::toHeaderValue($psu_ip_address);
        }
        // header params
        if ($psu_ip_port !== null) {
            $headerParams['PSU-IP-Port'] = ObjectSerializer::toHeaderValue($psu_ip_port);
        }
        // header params
        if ($psu_accept !== null) {
            $headerParams['PSU-Accept'] = ObjectSerializer::toHeaderValue($psu_accept);
        }
        // header params
        if ($psu_accept_charset !== null) {
            $headerParams['PSU-Accept-Charset'] = ObjectSerializer::toHeaderValue($psu_accept_charset);
        }
        // header params
        if ($psu_accept_encoding !== null) {
            $headerParams['PSU-Accept-Encoding'] = ObjectSerializer::toHeaderValue($psu_accept_encoding);
        }
        // header params
        if ($psu_accept_language !== null) {
            $headerParams['PSU-Accept-Language'] = ObjectSerializer::toHeaderValue($psu_accept_language);
        }
        // header params
        if ($psu_user_agent !== null) {
            $headerParams['PSU-User-Agent'] = ObjectSerializer::toHeaderValue($psu_user_agent);
        }
        // header params
        if ($psu_http_method !== null) {
            $headerParams['PSU-Http-Method'] = ObjectSerializer::toHeaderValue($psu_http_method);
        }
        // header params
        if ($psu_device_id !== null) {
            $headerParams['PSU-Device-ID'] = ObjectSerializer::toHeaderValue($psu_device_id);
        }
        // header params
        if ($psu_geo_location !== null) {
            $headerParams['PSU-Geo-Location'] = ObjectSerializer::toHeaderValue($psu_geo_location);
        }

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                '{' . 'organisation' . '}',
                ObjectSerializer::toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($consent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'consentId' . '}',
                ObjectSerializer::toPathValue($consent_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($unknown_base_type)) {
            $_tempBody = $unknown_base_type;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json', ]
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json', ],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startPaymentAuthorisation
     *
     * Start the authorisation process for a payment initiation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  bool $tpp_redirect_preferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. (optional)
     * @param  string $tpp_redirect_uri URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. (optional)
     * @param  string $tpp_nok_redirect_uri If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. (optional)
     * @param  string $tpp_notification_uri URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. (optional)
     * @param  string $tpp_notification_content_preferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. (optional)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BankIO\Sdk\Model\StartScaprocessResponse|\BankIO\Sdk\Model\Error400NGPIS|\BankIO\Sdk\Model\Error401NGPIS|\BankIO\Sdk\Model\Error403NGPIS|\BankIO\Sdk\Model\Error404NGPIS|\BankIO\Sdk\Model\Error405NGPIS|\BankIO\Sdk\Model\Error409NGPIS
     */
    public function startPaymentAuthorisation($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $tpp_redirect_preferred = null, $tpp_redirect_uri = null, $tpp_nok_redirect_uri = null, $tpp_notification_uri = null, $tpp_notification_content_preferred = null, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        list($response) = $this->startPaymentAuthorisationWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $tpp_redirect_preferred, $tpp_redirect_uri, $tpp_nok_redirect_uri, $tpp_notification_uri, $tpp_notification_content_preferred, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);
        return $response;
    }

    /**
     * Operation startPaymentAuthorisationWithHttpInfo
     *
     * Start the authorisation process for a payment initiation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  bool $tpp_redirect_preferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. (optional)
     * @param  string $tpp_redirect_uri URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. (optional)
     * @param  string $tpp_nok_redirect_uri If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. (optional)
     * @param  string $tpp_notification_uri URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. (optional)
     * @param  string $tpp_notification_content_preferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. (optional)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BankIO\Sdk\Model\StartScaprocessResponse|\BankIO\Sdk\Model\Error400NGPIS|\BankIO\Sdk\Model\Error401NGPIS|\BankIO\Sdk\Model\Error403NGPIS|\BankIO\Sdk\Model\Error404NGPIS|\BankIO\Sdk\Model\Error405NGPIS|\BankIO\Sdk\Model\Error409NGPIS, HTTP status code, HTTP response headers (array of strings)
     */
    public function startPaymentAuthorisationWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $tpp_redirect_preferred = null, $tpp_redirect_uri = null, $tpp_nok_redirect_uri = null, $tpp_notification_uri = null, $tpp_notification_content_preferred = null, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        $request = $this->startPaymentAuthorisationRequest($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $tpp_redirect_preferred, $tpp_redirect_uri, $tpp_nok_redirect_uri, $tpp_notification_uri, $tpp_notification_content_preferred, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\BankIO\Sdk\Model\StartScaprocessResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\StartScaprocessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BankIO\Sdk\Model\Error400NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error400NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BankIO\Sdk\Model\Error401NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error401NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BankIO\Sdk\Model\Error403NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error403NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BankIO\Sdk\Model\Error404NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error404NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\BankIO\Sdk\Model\Error405NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error405NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\BankIO\Sdk\Model\Error409NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error409NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BankIO\Sdk\Model\StartScaprocessResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\StartScaprocessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error400NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error401NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error403NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error404NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error405NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error409NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startPaymentAuthorisationAsync
     *
     * Start the authorisation process for a payment initiation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  bool $tpp_redirect_preferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. (optional)
     * @param  string $tpp_redirect_uri URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. (optional)
     * @param  string $tpp_nok_redirect_uri If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. (optional)
     * @param  string $tpp_notification_uri URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. (optional)
     * @param  string $tpp_notification_content_preferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. (optional)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startPaymentAuthorisationAsync($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $tpp_redirect_preferred = null, $tpp_redirect_uri = null, $tpp_nok_redirect_uri = null, $tpp_notification_uri = null, $tpp_notification_content_preferred = null, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        return $this->startPaymentAuthorisationAsyncWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $tpp_redirect_preferred, $tpp_redirect_uri, $tpp_nok_redirect_uri, $tpp_notification_uri, $tpp_notification_content_preferred, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startPaymentAuthorisationAsyncWithHttpInfo
     *
     * Start the authorisation process for a payment initiation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  bool $tpp_redirect_preferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. (optional)
     * @param  string $tpp_redirect_uri URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. (optional)
     * @param  string $tpp_nok_redirect_uri If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. (optional)
     * @param  string $tpp_notification_uri URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. (optional)
     * @param  string $tpp_notification_content_preferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. (optional)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startPaymentAuthorisationAsyncWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $tpp_redirect_preferred = null, $tpp_redirect_uri = null, $tpp_nok_redirect_uri = null, $tpp_notification_uri = null, $tpp_notification_content_preferred = null, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        $returnType = '\BankIO\Sdk\Model\StartScaprocessResponse';
        $request = $this->startPaymentAuthorisationRequest($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $tpp_redirect_preferred, $tpp_redirect_uri, $tpp_nok_redirect_uri, $tpp_notification_uri, $tpp_notification_content_preferred, $digest, $signature, $tpp_signature_certificate, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startPaymentAuthorisation'
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  bool $tpp_redirect_preferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. (optional)
     * @param  string $tpp_redirect_uri URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. (optional)
     * @param  string $tpp_nok_redirect_uri If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. (optional)
     * @param  string $tpp_notification_uri URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. (optional)
     * @param  string $tpp_notification_content_preferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. (optional)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function startPaymentAuthorisationRequest($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $tpp_redirect_preferred = null, $tpp_redirect_uri = null, $tpp_nok_redirect_uri = null, $tpp_notification_uri = null, $tpp_notification_content_preferred = null, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null || (is_array($organisation) && count($organisation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation when calling startPaymentAuthorisation'
            );
        }
        // verify the required parameter 'payment_service' is set
        if ($payment_service === null || (is_array($payment_service) && count($payment_service) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_service when calling startPaymentAuthorisation'
            );
        }
        // verify the required parameter 'payment_product' is set
        if ($payment_product === null || (is_array($payment_product) && count($payment_product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_product when calling startPaymentAuthorisation'
            );
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling startPaymentAuthorisation'
            );
        }
        // verify the required parameter 'x_request_id' is set
        if ($x_request_id === null || (is_array($x_request_id) && count($x_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_request_id when calling startPaymentAuthorisation'
            );
        }
        if ($psu_geo_location !== null && !preg_match("/GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/", $psu_geo_location)) {
            throw new \InvalidArgumentException("invalid value for \"psu_geo_location\" when calling CommonServicesApi.startPaymentAuthorisation, must conform to the pattern /GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/.");
        }


        $resourcePath = '/api/org/{organisation}/v1/{payment-service}/{payment-product}/{paymentId}/authorisations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_request_id !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($x_request_id);
        }
        // header params
        if ($psu_id !== null) {
            $headerParams['PSU-ID'] = ObjectSerializer::toHeaderValue($psu_id);
        }
        // header params
        if ($psu_id_type !== null) {
            $headerParams['PSU-ID-Type'] = ObjectSerializer::toHeaderValue($psu_id_type);
        }
        // header params
        if ($psu_corporate_id !== null) {
            $headerParams['PSU-Corporate-ID'] = ObjectSerializer::toHeaderValue($psu_corporate_id);
        }
        // header params
        if ($psu_corporate_id_type !== null) {
            $headerParams['PSU-Corporate-ID-Type'] = ObjectSerializer::toHeaderValue($psu_corporate_id_type);
        }
        // header params
        if ($tpp_redirect_preferred !== null) {
            $headerParams['TPP-Redirect-Preferred'] = ObjectSerializer::toHeaderValue($tpp_redirect_preferred);
        }
        // header params
        if ($tpp_redirect_uri !== null) {
            $headerParams['TPP-Redirect-URI'] = ObjectSerializer::toHeaderValue($tpp_redirect_uri);
        }
        // header params
        if ($tpp_nok_redirect_uri !== null) {
            $headerParams['TPP-Nok-Redirect-URI'] = ObjectSerializer::toHeaderValue($tpp_nok_redirect_uri);
        }
        // header params
        if ($tpp_notification_uri !== null) {
            $headerParams['TPP-Notification-URI'] = ObjectSerializer::toHeaderValue($tpp_notification_uri);
        }
        // header params
        if ($tpp_notification_content_preferred !== null) {
            $headerParams['TPP-Notification-Content-Preferred'] = ObjectSerializer::toHeaderValue($tpp_notification_content_preferred);
        }
        // header params
        if ($digest !== null) {
            $headerParams['Digest'] = ObjectSerializer::toHeaderValue($digest);
        }
        // header params
        if ($signature !== null) {
            $headerParams['Signature'] = ObjectSerializer::toHeaderValue($signature);
        }
        // header params
        if ($tpp_signature_certificate !== null) {
            $headerParams['TPP-Signature-Certificate'] = ObjectSerializer::toHeaderValue($tpp_signature_certificate);
        }
        // header params
        if ($psu_ip_address !== null) {
            $headerParams['PSU-IP-Address'] = ObjectSerializer::toHeaderValue($psu_ip_address);
        }
        // header params
        if ($psu_ip_port !== null) {
            $headerParams['PSU-IP-Port'] = ObjectSerializer::toHeaderValue($psu_ip_port);
        }
        // header params
        if ($psu_accept !== null) {
            $headerParams['PSU-Accept'] = ObjectSerializer::toHeaderValue($psu_accept);
        }
        // header params
        if ($psu_accept_charset !== null) {
            $headerParams['PSU-Accept-Charset'] = ObjectSerializer::toHeaderValue($psu_accept_charset);
        }
        // header params
        if ($psu_accept_encoding !== null) {
            $headerParams['PSU-Accept-Encoding'] = ObjectSerializer::toHeaderValue($psu_accept_encoding);
        }
        // header params
        if ($psu_accept_language !== null) {
            $headerParams['PSU-Accept-Language'] = ObjectSerializer::toHeaderValue($psu_accept_language);
        }
        // header params
        if ($psu_user_agent !== null) {
            $headerParams['PSU-User-Agent'] = ObjectSerializer::toHeaderValue($psu_user_agent);
        }
        // header params
        if ($psu_http_method !== null) {
            $headerParams['PSU-Http-Method'] = ObjectSerializer::toHeaderValue($psu_http_method);
        }
        // header params
        if ($psu_device_id !== null) {
            $headerParams['PSU-Device-ID'] = ObjectSerializer::toHeaderValue($psu_device_id);
        }
        // header params
        if ($psu_geo_location !== null) {
            $headerParams['PSU-Geo-Location'] = ObjectSerializer::toHeaderValue($psu_geo_location);
        }

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                '{' . 'organisation' . '}',
                ObjectSerializer::toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($payment_service !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-service' . '}',
                ObjectSerializer::toPathValue($payment_service),
                $resourcePath
            );
        }
        // path params
        if ($payment_product !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-product' . '}',
                ObjectSerializer::toPathValue($payment_product),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($unknown_base_type)) {
            $_tempBody = $unknown_base_type;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json', ]
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json', ],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation startPaymentInitiationCancellationAuthorisation
     *
     * Start the authorisation process for the cancellation of the addressed payment
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  bool $tpp_redirect_preferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. (optional)
     * @param  string $tpp_redirect_uri URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. (optional)
     * @param  string $tpp_nok_redirect_uri If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. (optional)
     * @param  string $tpp_notification_uri URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. (optional)
     * @param  string $tpp_notification_content_preferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BankIO\Sdk\Model\StartScaprocessResponse|\BankIO\Sdk\Model\Error400NGPIS|\BankIO\Sdk\Model\Error401NGPIS|\BankIO\Sdk\Model\Error403NGPIS|\BankIO\Sdk\Model\Error404NGPIS|\BankIO\Sdk\Model\Error405NGPIS|\BankIO\Sdk\Model\Error409NGPIS
     */
    public function startPaymentInitiationCancellationAuthorisation($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $tpp_redirect_preferred = null, $tpp_redirect_uri = null, $tpp_nok_redirect_uri = null, $tpp_notification_uri = null, $tpp_notification_content_preferred = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        list($response) = $this->startPaymentInitiationCancellationAuthorisationWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $tpp_redirect_preferred, $tpp_redirect_uri, $tpp_nok_redirect_uri, $tpp_notification_uri, $tpp_notification_content_preferred, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);
        return $response;
    }

    /**
     * Operation startPaymentInitiationCancellationAuthorisationWithHttpInfo
     *
     * Start the authorisation process for the cancellation of the addressed payment
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  bool $tpp_redirect_preferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. (optional)
     * @param  string $tpp_redirect_uri URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. (optional)
     * @param  string $tpp_nok_redirect_uri If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. (optional)
     * @param  string $tpp_notification_uri URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. (optional)
     * @param  string $tpp_notification_content_preferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BankIO\Sdk\Model\StartScaprocessResponse|\BankIO\Sdk\Model\Error400NGPIS|\BankIO\Sdk\Model\Error401NGPIS|\BankIO\Sdk\Model\Error403NGPIS|\BankIO\Sdk\Model\Error404NGPIS|\BankIO\Sdk\Model\Error405NGPIS|\BankIO\Sdk\Model\Error409NGPIS, HTTP status code, HTTP response headers (array of strings)
     */
    public function startPaymentInitiationCancellationAuthorisationWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $tpp_redirect_preferred = null, $tpp_redirect_uri = null, $tpp_nok_redirect_uri = null, $tpp_notification_uri = null, $tpp_notification_content_preferred = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        $request = $this->startPaymentInitiationCancellationAuthorisationRequest($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $tpp_redirect_preferred, $tpp_redirect_uri, $tpp_nok_redirect_uri, $tpp_notification_uri, $tpp_notification_content_preferred, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 201:
                    if ('\BankIO\Sdk\Model\StartScaprocessResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\StartScaprocessResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BankIO\Sdk\Model\Error400NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error400NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BankIO\Sdk\Model\Error401NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error401NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BankIO\Sdk\Model\Error403NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error403NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BankIO\Sdk\Model\Error404NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error404NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\BankIO\Sdk\Model\Error405NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error405NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\BankIO\Sdk\Model\Error409NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error409NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BankIO\Sdk\Model\StartScaprocessResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 201:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\StartScaprocessResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error400NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error401NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error403NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error404NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error405NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error409NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation startPaymentInitiationCancellationAuthorisationAsync
     *
     * Start the authorisation process for the cancellation of the addressed payment
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  bool $tpp_redirect_preferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. (optional)
     * @param  string $tpp_redirect_uri URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. (optional)
     * @param  string $tpp_nok_redirect_uri If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. (optional)
     * @param  string $tpp_notification_uri URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. (optional)
     * @param  string $tpp_notification_content_preferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startPaymentInitiationCancellationAuthorisationAsync($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $tpp_redirect_preferred = null, $tpp_redirect_uri = null, $tpp_nok_redirect_uri = null, $tpp_notification_uri = null, $tpp_notification_content_preferred = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        return $this->startPaymentInitiationCancellationAuthorisationAsyncWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $tpp_redirect_preferred, $tpp_redirect_uri, $tpp_nok_redirect_uri, $tpp_notification_uri, $tpp_notification_content_preferred, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation startPaymentInitiationCancellationAuthorisationAsyncWithHttpInfo
     *
     * Start the authorisation process for the cancellation of the addressed payment
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  bool $tpp_redirect_preferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. (optional)
     * @param  string $tpp_redirect_uri URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. (optional)
     * @param  string $tpp_nok_redirect_uri If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. (optional)
     * @param  string $tpp_notification_uri URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. (optional)
     * @param  string $tpp_notification_content_preferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function startPaymentInitiationCancellationAuthorisationAsyncWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $tpp_redirect_preferred = null, $tpp_redirect_uri = null, $tpp_nok_redirect_uri = null, $tpp_notification_uri = null, $tpp_notification_content_preferred = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        $returnType = '\BankIO\Sdk\Model\StartScaprocessResponse';
        $request = $this->startPaymentInitiationCancellationAuthorisationRequest($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $tpp_redirect_preferred, $tpp_redirect_uri, $tpp_nok_redirect_uri, $tpp_notification_uri, $tpp_notification_content_preferred, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'startPaymentInitiationCancellationAuthorisation'
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  bool $tpp_redirect_preferred If it equals \&quot;true\&quot;, the TPP prefers a redirect over an embedded SCA approach. If it equals \&quot;false\&quot;, the TPP prefers not to be redirected for SCA. The ASPSP will then choose between the Embedded or the Decoupled SCA approach, depending on the choice of the SCA procedure by the TPP/PSU. If the parameter is not used, the ASPSP will choose the SCA approach to be applied depending on the SCA method chosen by the TPP/PSU. (optional)
     * @param  string $tpp_redirect_uri URI of the TPP, where the transaction flow shall be redirected to after a Redirect.  Mandated for the Redirect SCA Approach, specifically  when TPP-Redirect-Preferred equals \&quot;true\&quot;. It is recommended to always use this header field.  **Remark for Future:**  This field might be changed to mandatory in the next version of the specification. (optional)
     * @param  string $tpp_nok_redirect_uri If this URI is contained, the TPP is asking to redirect the transaction flow to this address instead of the TPP-Redirect-URI in case of a negative result of the redirect SCA method. This might be ignored by the ASPSP. (optional)
     * @param  string $tpp_notification_uri URI for the Endpoint of the TPP-API to which the status of the payment initiation should be sent. This header field may by ignored by the ASPSP.  For security reasons, it shall be ensured that the TPP-Notification-URI as introduced above is secured by the TPP eIDAS QWAC used for identification of the TPP. The following applies:  URIs which are provided by TPPs in TPP-Notification-URI shall comply with the domain secured by the eIDAS QWAC certificate of the TPP in the field CN or SubjectAltName of the certificate. Please note that in case of example-TPP.com as certificate entry TPP- Notification-URI like www.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications or notifications.example-TPP.com/xs2a-client/v1/ASPSPidentifcation/mytransaction- id/notifications would be compliant.  Wildcard definitions shall be taken into account for compliance checks by the ASPSP.  ASPSPs may respond with ASPSP-Notification-Support set to false, if the provided URIs do not comply. (optional)
     * @param  string $tpp_notification_content_preferred The string has the form   status&#x3D;X1, ..., Xn  where Xi is one of the constants SCA, PROCESS, LAST and where constants are not repeated. The usage of the constants supports the of following semantics:    SCA: A notification on every change of the scaStatus attribute for all related authorisation processes is preferred by the TPP.    PROCESS: A notification on all changes of consentStatus or transactionStatus attributes is preferred by the TPP.   LAST: Only a notification on the last consentStatus or transactionStatus as available in the XS2A interface is preferred by the TPP.  This header field may be ignored, if the ASPSP does not support resource notification services for the related TPP. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function startPaymentInitiationCancellationAuthorisationRequest($organisation, $payment_service, $payment_product, $payment_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $tpp_redirect_preferred = null, $tpp_redirect_uri = null, $tpp_nok_redirect_uri = null, $tpp_notification_uri = null, $tpp_notification_content_preferred = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null || (is_array($organisation) && count($organisation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation when calling startPaymentInitiationCancellationAuthorisation'
            );
        }
        // verify the required parameter 'payment_service' is set
        if ($payment_service === null || (is_array($payment_service) && count($payment_service) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_service when calling startPaymentInitiationCancellationAuthorisation'
            );
        }
        // verify the required parameter 'payment_product' is set
        if ($payment_product === null || (is_array($payment_product) && count($payment_product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_product when calling startPaymentInitiationCancellationAuthorisation'
            );
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling startPaymentInitiationCancellationAuthorisation'
            );
        }
        // verify the required parameter 'x_request_id' is set
        if ($x_request_id === null || (is_array($x_request_id) && count($x_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_request_id when calling startPaymentInitiationCancellationAuthorisation'
            );
        }
        if ($psu_geo_location !== null && !preg_match("/GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/", $psu_geo_location)) {
            throw new \InvalidArgumentException("invalid value for \"psu_geo_location\" when calling CommonServicesApi.startPaymentInitiationCancellationAuthorisation, must conform to the pattern /GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/.");
        }


        $resourcePath = '/api/org/{organisation}/v1/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_request_id !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($x_request_id);
        }
        // header params
        if ($digest !== null) {
            $headerParams['Digest'] = ObjectSerializer::toHeaderValue($digest);
        }
        // header params
        if ($signature !== null) {
            $headerParams['Signature'] = ObjectSerializer::toHeaderValue($signature);
        }
        // header params
        if ($tpp_signature_certificate !== null) {
            $headerParams['TPP-Signature-Certificate'] = ObjectSerializer::toHeaderValue($tpp_signature_certificate);
        }
        // header params
        if ($psu_id !== null) {
            $headerParams['PSU-ID'] = ObjectSerializer::toHeaderValue($psu_id);
        }
        // header params
        if ($psu_id_type !== null) {
            $headerParams['PSU-ID-Type'] = ObjectSerializer::toHeaderValue($psu_id_type);
        }
        // header params
        if ($psu_corporate_id !== null) {
            $headerParams['PSU-Corporate-ID'] = ObjectSerializer::toHeaderValue($psu_corporate_id);
        }
        // header params
        if ($psu_corporate_id_type !== null) {
            $headerParams['PSU-Corporate-ID-Type'] = ObjectSerializer::toHeaderValue($psu_corporate_id_type);
        }
        // header params
        if ($tpp_redirect_preferred !== null) {
            $headerParams['TPP-Redirect-Preferred'] = ObjectSerializer::toHeaderValue($tpp_redirect_preferred);
        }
        // header params
        if ($tpp_redirect_uri !== null) {
            $headerParams['TPP-Redirect-URI'] = ObjectSerializer::toHeaderValue($tpp_redirect_uri);
        }
        // header params
        if ($tpp_nok_redirect_uri !== null) {
            $headerParams['TPP-Nok-Redirect-URI'] = ObjectSerializer::toHeaderValue($tpp_nok_redirect_uri);
        }
        // header params
        if ($tpp_notification_uri !== null) {
            $headerParams['TPP-Notification-URI'] = ObjectSerializer::toHeaderValue($tpp_notification_uri);
        }
        // header params
        if ($tpp_notification_content_preferred !== null) {
            $headerParams['TPP-Notification-Content-Preferred'] = ObjectSerializer::toHeaderValue($tpp_notification_content_preferred);
        }
        // header params
        if ($psu_ip_address !== null) {
            $headerParams['PSU-IP-Address'] = ObjectSerializer::toHeaderValue($psu_ip_address);
        }
        // header params
        if ($psu_ip_port !== null) {
            $headerParams['PSU-IP-Port'] = ObjectSerializer::toHeaderValue($psu_ip_port);
        }
        // header params
        if ($psu_accept !== null) {
            $headerParams['PSU-Accept'] = ObjectSerializer::toHeaderValue($psu_accept);
        }
        // header params
        if ($psu_accept_charset !== null) {
            $headerParams['PSU-Accept-Charset'] = ObjectSerializer::toHeaderValue($psu_accept_charset);
        }
        // header params
        if ($psu_accept_encoding !== null) {
            $headerParams['PSU-Accept-Encoding'] = ObjectSerializer::toHeaderValue($psu_accept_encoding);
        }
        // header params
        if ($psu_accept_language !== null) {
            $headerParams['PSU-Accept-Language'] = ObjectSerializer::toHeaderValue($psu_accept_language);
        }
        // header params
        if ($psu_user_agent !== null) {
            $headerParams['PSU-User-Agent'] = ObjectSerializer::toHeaderValue($psu_user_agent);
        }
        // header params
        if ($psu_http_method !== null) {
            $headerParams['PSU-Http-Method'] = ObjectSerializer::toHeaderValue($psu_http_method);
        }
        // header params
        if ($psu_device_id !== null) {
            $headerParams['PSU-Device-ID'] = ObjectSerializer::toHeaderValue($psu_device_id);
        }
        // header params
        if ($psu_geo_location !== null) {
            $headerParams['PSU-Geo-Location'] = ObjectSerializer::toHeaderValue($psu_geo_location);
        }

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                '{' . 'organisation' . '}',
                ObjectSerializer::toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($payment_service !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-service' . '}',
                ObjectSerializer::toPathValue($payment_service),
                $resourcePath
            );
        }
        // path params
        if ($payment_product !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-product' . '}',
                ObjectSerializer::toPathValue($payment_product),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($unknown_base_type)) {
            $_tempBody = $unknown_base_type;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json', ]
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json', ],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updateConsentsPsuData
     *
     * Update PSU Data for consents
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $consent_id ID of the corresponding consent object as returned by an account information consent request. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse|\BankIO\Sdk\Model\Error400NGAIS|\BankIO\Sdk\Model\Error401NGAIS|\BankIO\Sdk\Model\Error403NGAIS|\BankIO\Sdk\Model\Error404NGAIS|\BankIO\Sdk\Model\Error405NGAIS|\BankIO\Sdk\Model\Error406NGAIS|\BankIO\Sdk\Model\Error409NGAIS|\BankIO\Sdk\Model\Error429NGAIS
     */
    public function updateConsentsPsuData($organisation, $consent_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        list($response) = $this->updateConsentsPsuDataWithHttpInfo($organisation, $consent_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);
        return $response;
    }

    /**
     * Operation updateConsentsPsuDataWithHttpInfo
     *
     * Update PSU Data for consents
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $consent_id ID of the corresponding consent object as returned by an account information consent request. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse|\BankIO\Sdk\Model\Error400NGAIS|\BankIO\Sdk\Model\Error401NGAIS|\BankIO\Sdk\Model\Error403NGAIS|\BankIO\Sdk\Model\Error404NGAIS|\BankIO\Sdk\Model\Error405NGAIS|\BankIO\Sdk\Model\Error406NGAIS|\BankIO\Sdk\Model\Error409NGAIS|\BankIO\Sdk\Model\Error429NGAIS, HTTP status code, HTTP response headers (array of strings)
     */
    public function updateConsentsPsuDataWithHttpInfo($organisation, $consent_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        $request = $this->updateConsentsPsuDataRequest($organisation, $consent_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BankIO\Sdk\Model\Error400NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error400NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BankIO\Sdk\Model\Error401NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error401NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BankIO\Sdk\Model\Error403NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error403NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BankIO\Sdk\Model\Error404NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error404NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\BankIO\Sdk\Model\Error405NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error405NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 406:
                    if ('\BankIO\Sdk\Model\Error406NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error406NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\BankIO\Sdk\Model\Error409NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error409NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 429:
                    if ('\BankIO\Sdk\Model\Error429NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error429NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error400NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error401NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error403NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error404NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error405NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 406:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error406NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error409NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 429:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error429NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updateConsentsPsuDataAsync
     *
     * Update PSU Data for consents
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $consent_id ID of the corresponding consent object as returned by an account information consent request. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConsentsPsuDataAsync($organisation, $consent_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        return $this->updateConsentsPsuDataAsyncWithHttpInfo($organisation, $consent_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updateConsentsPsuDataAsyncWithHttpInfo
     *
     * Update PSU Data for consents
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $consent_id ID of the corresponding consent object as returned by an account information consent request. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updateConsentsPsuDataAsyncWithHttpInfo($organisation, $consent_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        $returnType = 'OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse';
        $request = $this->updateConsentsPsuDataRequest($organisation, $consent_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updateConsentsPsuData'
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $consent_id ID of the corresponding consent object as returned by an account information consent request. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding HTTP request  IP Address field between PSU and TPP.  It shall be contained if and only if this request was actively initiated by the PSU. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updateConsentsPsuDataRequest($organisation, $consent_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null || (is_array($organisation) && count($organisation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation when calling updateConsentsPsuData'
            );
        }
        // verify the required parameter 'consent_id' is set
        if ($consent_id === null || (is_array($consent_id) && count($consent_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $consent_id when calling updateConsentsPsuData'
            );
        }
        // verify the required parameter 'authorisation_id' is set
        if ($authorisation_id === null || (is_array($authorisation_id) && count($authorisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorisation_id when calling updateConsentsPsuData'
            );
        }
        // verify the required parameter 'x_request_id' is set
        if ($x_request_id === null || (is_array($x_request_id) && count($x_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_request_id when calling updateConsentsPsuData'
            );
        }
        if ($psu_geo_location !== null && !preg_match("/GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/", $psu_geo_location)) {
            throw new \InvalidArgumentException("invalid value for \"psu_geo_location\" when calling CommonServicesApi.updateConsentsPsuData, must conform to the pattern /GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/.");
        }


        $resourcePath = '/api/org/{organisation}/v1/consents/{consentId}/authorisations/{authorisationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_request_id !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($x_request_id);
        }
        // header params
        if ($digest !== null) {
            $headerParams['Digest'] = ObjectSerializer::toHeaderValue($digest);
        }
        // header params
        if ($signature !== null) {
            $headerParams['Signature'] = ObjectSerializer::toHeaderValue($signature);
        }
        // header params
        if ($tpp_signature_certificate !== null) {
            $headerParams['TPP-Signature-Certificate'] = ObjectSerializer::toHeaderValue($tpp_signature_certificate);
        }
        // header params
        if ($psu_id !== null) {
            $headerParams['PSU-ID'] = ObjectSerializer::toHeaderValue($psu_id);
        }
        // header params
        if ($psu_id_type !== null) {
            $headerParams['PSU-ID-Type'] = ObjectSerializer::toHeaderValue($psu_id_type);
        }
        // header params
        if ($psu_corporate_id !== null) {
            $headerParams['PSU-Corporate-ID'] = ObjectSerializer::toHeaderValue($psu_corporate_id);
        }
        // header params
        if ($psu_corporate_id_type !== null) {
            $headerParams['PSU-Corporate-ID-Type'] = ObjectSerializer::toHeaderValue($psu_corporate_id_type);
        }
        // header params
        if ($psu_ip_address !== null) {
            $headerParams['PSU-IP-Address'] = ObjectSerializer::toHeaderValue($psu_ip_address);
        }
        // header params
        if ($psu_ip_port !== null) {
            $headerParams['PSU-IP-Port'] = ObjectSerializer::toHeaderValue($psu_ip_port);
        }
        // header params
        if ($psu_accept !== null) {
            $headerParams['PSU-Accept'] = ObjectSerializer::toHeaderValue($psu_accept);
        }
        // header params
        if ($psu_accept_charset !== null) {
            $headerParams['PSU-Accept-Charset'] = ObjectSerializer::toHeaderValue($psu_accept_charset);
        }
        // header params
        if ($psu_accept_encoding !== null) {
            $headerParams['PSU-Accept-Encoding'] = ObjectSerializer::toHeaderValue($psu_accept_encoding);
        }
        // header params
        if ($psu_accept_language !== null) {
            $headerParams['PSU-Accept-Language'] = ObjectSerializer::toHeaderValue($psu_accept_language);
        }
        // header params
        if ($psu_user_agent !== null) {
            $headerParams['PSU-User-Agent'] = ObjectSerializer::toHeaderValue($psu_user_agent);
        }
        // header params
        if ($psu_http_method !== null) {
            $headerParams['PSU-Http-Method'] = ObjectSerializer::toHeaderValue($psu_http_method);
        }
        // header params
        if ($psu_device_id !== null) {
            $headerParams['PSU-Device-ID'] = ObjectSerializer::toHeaderValue($psu_device_id);
        }
        // header params
        if ($psu_geo_location !== null) {
            $headerParams['PSU-Geo-Location'] = ObjectSerializer::toHeaderValue($psu_geo_location);
        }

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                '{' . 'organisation' . '}',
                ObjectSerializer::toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($consent_id !== null) {
            $resourcePath = str_replace(
                '{' . 'consentId' . '}',
                ObjectSerializer::toPathValue($consent_id),
                $resourcePath
            );
        }
        // path params
        if ($authorisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'authorisationId' . '}',
                ObjectSerializer::toPathValue($authorisation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($unknown_base_type)) {
            $_tempBody = $unknown_base_type;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json', ]
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json', ],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePaymentCancellationPsuData
     *
     * Update PSU data for payment initiation cancellation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse|\BankIO\Sdk\Model\Error400NGPIS|\BankIO\Sdk\Model\Error401NGPIS|\BankIO\Sdk\Model\Error403NGPIS|\BankIO\Sdk\Model\Error404NGPIS|\BankIO\Sdk\Model\Error405NGPIS|\BankIO\Sdk\Model\Error409NGPIS
     */
    public function updatePaymentCancellationPsuData($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        list($response) = $this->updatePaymentCancellationPsuDataWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);
        return $response;
    }

    /**
     * Operation updatePaymentCancellationPsuDataWithHttpInfo
     *
     * Update PSU data for payment initiation cancellation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse|\BankIO\Sdk\Model\Error400NGPIS|\BankIO\Sdk\Model\Error401NGPIS|\BankIO\Sdk\Model\Error403NGPIS|\BankIO\Sdk\Model\Error404NGPIS|\BankIO\Sdk\Model\Error405NGPIS|\BankIO\Sdk\Model\Error409NGPIS, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePaymentCancellationPsuDataWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        $request = $this->updatePaymentCancellationPsuDataRequest($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BankIO\Sdk\Model\Error400NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error400NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BankIO\Sdk\Model\Error401NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error401NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BankIO\Sdk\Model\Error403NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error403NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BankIO\Sdk\Model\Error404NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error404NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\BankIO\Sdk\Model\Error405NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error405NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\BankIO\Sdk\Model\Error409NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error409NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error400NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error401NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error403NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error404NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error405NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error409NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePaymentCancellationPsuDataAsync
     *
     * Update PSU data for payment initiation cancellation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentCancellationPsuDataAsync($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        return $this->updatePaymentCancellationPsuDataAsyncWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePaymentCancellationPsuDataAsyncWithHttpInfo
     *
     * Update PSU data for payment initiation cancellation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentCancellationPsuDataAsyncWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        $returnType = 'OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse';
        $request = $this->updatePaymentCancellationPsuDataRequest($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePaymentCancellationPsuData'
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePaymentCancellationPsuDataRequest($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null || (is_array($organisation) && count($organisation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation when calling updatePaymentCancellationPsuData'
            );
        }
        // verify the required parameter 'payment_service' is set
        if ($payment_service === null || (is_array($payment_service) && count($payment_service) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_service when calling updatePaymentCancellationPsuData'
            );
        }
        // verify the required parameter 'payment_product' is set
        if ($payment_product === null || (is_array($payment_product) && count($payment_product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_product when calling updatePaymentCancellationPsuData'
            );
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling updatePaymentCancellationPsuData'
            );
        }
        // verify the required parameter 'authorisation_id' is set
        if ($authorisation_id === null || (is_array($authorisation_id) && count($authorisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorisation_id when calling updatePaymentCancellationPsuData'
            );
        }
        // verify the required parameter 'x_request_id' is set
        if ($x_request_id === null || (is_array($x_request_id) && count($x_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_request_id when calling updatePaymentCancellationPsuData'
            );
        }
        if ($psu_geo_location !== null && !preg_match("/GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/", $psu_geo_location)) {
            throw new \InvalidArgumentException("invalid value for \"psu_geo_location\" when calling CommonServicesApi.updatePaymentCancellationPsuData, must conform to the pattern /GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/.");
        }


        $resourcePath = '/api/org/{organisation}/v1/{payment-service}/{payment-product}/{paymentId}/cancellation-authorisations/{authorisationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_request_id !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($x_request_id);
        }
        // header params
        if ($digest !== null) {
            $headerParams['Digest'] = ObjectSerializer::toHeaderValue($digest);
        }
        // header params
        if ($signature !== null) {
            $headerParams['Signature'] = ObjectSerializer::toHeaderValue($signature);
        }
        // header params
        if ($tpp_signature_certificate !== null) {
            $headerParams['TPP-Signature-Certificate'] = ObjectSerializer::toHeaderValue($tpp_signature_certificate);
        }
        // header params
        if ($psu_id !== null) {
            $headerParams['PSU-ID'] = ObjectSerializer::toHeaderValue($psu_id);
        }
        // header params
        if ($psu_id_type !== null) {
            $headerParams['PSU-ID-Type'] = ObjectSerializer::toHeaderValue($psu_id_type);
        }
        // header params
        if ($psu_corporate_id !== null) {
            $headerParams['PSU-Corporate-ID'] = ObjectSerializer::toHeaderValue($psu_corporate_id);
        }
        // header params
        if ($psu_corporate_id_type !== null) {
            $headerParams['PSU-Corporate-ID-Type'] = ObjectSerializer::toHeaderValue($psu_corporate_id_type);
        }
        // header params
        if ($psu_ip_address !== null) {
            $headerParams['PSU-IP-Address'] = ObjectSerializer::toHeaderValue($psu_ip_address);
        }
        // header params
        if ($psu_ip_port !== null) {
            $headerParams['PSU-IP-Port'] = ObjectSerializer::toHeaderValue($psu_ip_port);
        }
        // header params
        if ($psu_accept !== null) {
            $headerParams['PSU-Accept'] = ObjectSerializer::toHeaderValue($psu_accept);
        }
        // header params
        if ($psu_accept_charset !== null) {
            $headerParams['PSU-Accept-Charset'] = ObjectSerializer::toHeaderValue($psu_accept_charset);
        }
        // header params
        if ($psu_accept_encoding !== null) {
            $headerParams['PSU-Accept-Encoding'] = ObjectSerializer::toHeaderValue($psu_accept_encoding);
        }
        // header params
        if ($psu_accept_language !== null) {
            $headerParams['PSU-Accept-Language'] = ObjectSerializer::toHeaderValue($psu_accept_language);
        }
        // header params
        if ($psu_user_agent !== null) {
            $headerParams['PSU-User-Agent'] = ObjectSerializer::toHeaderValue($psu_user_agent);
        }
        // header params
        if ($psu_http_method !== null) {
            $headerParams['PSU-Http-Method'] = ObjectSerializer::toHeaderValue($psu_http_method);
        }
        // header params
        if ($psu_device_id !== null) {
            $headerParams['PSU-Device-ID'] = ObjectSerializer::toHeaderValue($psu_device_id);
        }
        // header params
        if ($psu_geo_location !== null) {
            $headerParams['PSU-Geo-Location'] = ObjectSerializer::toHeaderValue($psu_geo_location);
        }

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                '{' . 'organisation' . '}',
                ObjectSerializer::toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($payment_service !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-service' . '}',
                ObjectSerializer::toPathValue($payment_service),
                $resourcePath
            );
        }
        // path params
        if ($payment_product !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-product' . '}',
                ObjectSerializer::toPathValue($payment_product),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }
        // path params
        if ($authorisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'authorisationId' . '}',
                ObjectSerializer::toPathValue($authorisation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($unknown_base_type)) {
            $_tempBody = $unknown_base_type;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json', ]
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json', ],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation updatePaymentPsuData
     *
     * Update PSU data for payment initiation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type unknown_base_type (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse|\BankIO\Sdk\Model\Error400NGPIS|\BankIO\Sdk\Model\Error401NGPIS|\BankIO\Sdk\Model\Error403NGPIS|\BankIO\Sdk\Model\Error404NGPIS|\BankIO\Sdk\Model\Error405NGPIS|\BankIO\Sdk\Model\Error409NGPIS
     */
    public function updatePaymentPsuData($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        list($response) = $this->updatePaymentPsuDataWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);
        return $response;
    }

    /**
     * Operation updatePaymentPsuDataWithHttpInfo
     *
     * Update PSU data for payment initiation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse|\BankIO\Sdk\Model\Error400NGPIS|\BankIO\Sdk\Model\Error401NGPIS|\BankIO\Sdk\Model\Error403NGPIS|\BankIO\Sdk\Model\Error404NGPIS|\BankIO\Sdk\Model\Error405NGPIS|\BankIO\Sdk\Model\Error409NGPIS, HTTP status code, HTTP response headers (array of strings)
     */
    public function updatePaymentPsuDataWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        $request = $this->updatePaymentPsuDataRequest($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, 'OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BankIO\Sdk\Model\Error400NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error400NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BankIO\Sdk\Model\Error401NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error401NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BankIO\Sdk\Model\Error403NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error403NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BankIO\Sdk\Model\Error404NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error404NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\BankIO\Sdk\Model\Error405NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error405NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\BankIO\Sdk\Model\Error409NGPIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error409NGPIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = 'OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        'OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error400NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error401NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error403NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error404NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error405NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error409NGPIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation updatePaymentPsuDataAsync
     *
     * Update PSU data for payment initiation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentPsuDataAsync($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        return $this->updatePaymentPsuDataAsyncWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation updatePaymentPsuDataAsyncWithHttpInfo
     *
     * Update PSU data for payment initiation
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function updatePaymentPsuDataAsyncWithHttpInfo($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        $returnType = 'OneOfUpdatePsuIdenticationResponseUpdatePsuAuthenticationResponseSelectPsuAuthenticationMethodResponseScaStatusResponseAuthorisationConfirmationResponse';
        $request = $this->updatePaymentPsuDataRequest($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest, $signature, $tpp_signature_certificate, $psu_id, $psu_id_type, $psu_corporate_id, $psu_corporate_id_type, $psu_ip_address, $psu_ip_port, $psu_accept, $psu_accept_charset, $psu_accept_encoding, $psu_accept_language, $psu_user_agent, $psu_http_method, $psu_device_id, $psu_geo_location, $unknown_base_type);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'updatePaymentPsuData'
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $payment_service Payment service:  Possible values are: * payments * bulk-payments * periodic-payments (required)
     * @param  string $payment_product The addressed payment product endpoint, e.g. for SEPA Credit Transfers (SCT). The ASPSP will publish which of the payment products/endpoints will be supported.  The following payment products are supported:   - sepa-credit-transfers   - instant-sepa-credit-transfers   - target-2-payments   - cross-border-credit-transfers   - pain.001-sepa-credit-transfers   - pain.001-instant-sepa-credit-transfers   - pain.001-target-2-payments   - pain.001-cross-border-credit-transfers  **Remark:** For all SEPA Credit Transfer based endpoints which accept XML encoding,  the XML pain.001 schemes provided by EPC are supported by the ASPSP as a minimum for the body content.  Further XML schemes might be supported by some communities.  **Remark:** For cross-border and TARGET-2 payments only community wide pain.001 schemes do exist.  There are plenty of country specificic scheme variants. (required)
     * @param  string $payment_id Resource identification of the generated payment initiation resource. (required)
     * @param  string $authorisation_id Resource identification of the related SCA. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     * @param  string $psu_id Client ID of the PSU in the ASPSP client interface.   Might be mandated in the ASPSP&#39;s documentation.  It might be contained even if an OAuth2 based authentication was performed in a pre-step or an OAuth2 based SCA was performed in an preceding AIS service in the same session. In this case the ASPSP might check whether PSU-ID and token match,  according to ASPSP documentation. (optional)
     * @param  string $psu_id_type Type of the PSU-ID, needed in scenarios where PSUs have several PSU-IDs as access possibility.  In this case, the mean and use are then defined in the ASPSP’s documentation. (optional)
     * @param  string $psu_corporate_id Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_corporate_id_type Might be mandated in the ASPSP&#39;s documentation. Only used in a corporate context. (optional)
     * @param  string $psu_ip_address The forwarded IP Address header field consists of the corresponding http request IP Address field between PSU and TPP. (optional)
     * @param  string $psu_ip_port The forwarded IP Port header field consists of the corresponding HTTP request IP Port field between PSU and TPP, if available. (optional)
     * @param  string $psu_accept The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_charset The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_encoding The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_accept_language The forwarded IP Accept header fields consist of the corresponding HTTP request Accept header fields between PSU and TPP, if available. (optional)
     * @param  string $psu_user_agent The forwarded Agent header field of the HTTP request between PSU and TPP, if available. (optional)
     * @param  string $psu_http_method HTTP method used at the PSU ? TPP interface, if available. Valid values are: * GET * POST * PUT * PATCH * DELETE (optional)
     * @param  string $psu_device_id UUID (Universally Unique Identifier) for a device, which is used by the PSU, if available. UUID identifies either a device or a device dependant application installation. In case of an installation identification this ID needs to be unaltered until removal from device. (optional)
     * @param  string $psu_geo_location The forwarded Geo Location of the corresponding http request between PSU and TPP if available. (optional)
     * @param  \BankIO\Sdk\Model\UNKNOWN_BASE_TYPE $unknown_base_type (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function updatePaymentPsuDataRequest($organisation, $payment_service, $payment_product, $payment_id, $authorisation_id, $x_request_id, $digest = null, $signature = null, $tpp_signature_certificate = null, $psu_id = null, $psu_id_type = null, $psu_corporate_id = null, $psu_corporate_id_type = null, $psu_ip_address = null, $psu_ip_port = null, $psu_accept = null, $psu_accept_charset = null, $psu_accept_encoding = null, $psu_accept_language = null, $psu_user_agent = null, $psu_http_method = null, $psu_device_id = null, $psu_geo_location = null, $unknown_base_type = null)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null || (is_array($organisation) && count($organisation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation when calling updatePaymentPsuData'
            );
        }
        // verify the required parameter 'payment_service' is set
        if ($payment_service === null || (is_array($payment_service) && count($payment_service) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_service when calling updatePaymentPsuData'
            );
        }
        // verify the required parameter 'payment_product' is set
        if ($payment_product === null || (is_array($payment_product) && count($payment_product) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_product when calling updatePaymentPsuData'
            );
        }
        // verify the required parameter 'payment_id' is set
        if ($payment_id === null || (is_array($payment_id) && count($payment_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $payment_id when calling updatePaymentPsuData'
            );
        }
        // verify the required parameter 'authorisation_id' is set
        if ($authorisation_id === null || (is_array($authorisation_id) && count($authorisation_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $authorisation_id when calling updatePaymentPsuData'
            );
        }
        // verify the required parameter 'x_request_id' is set
        if ($x_request_id === null || (is_array($x_request_id) && count($x_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_request_id when calling updatePaymentPsuData'
            );
        }
        if ($psu_geo_location !== null && !preg_match("/GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/", $psu_geo_location)) {
            throw new \InvalidArgumentException("invalid value for \"psu_geo_location\" when calling CommonServicesApi.updatePaymentPsuData, must conform to the pattern /GEO:-?[0-9]{1,2}\\.[0-9]{6};-?[0-9]{1,3}\\.[0-9]{6}/.");
        }


        $resourcePath = '/api/org/{organisation}/v1/{payment-service}/{payment-product}/{paymentId}/authorisations/{authorisationId}';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_request_id !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($x_request_id);
        }
        // header params
        if ($digest !== null) {
            $headerParams['Digest'] = ObjectSerializer::toHeaderValue($digest);
        }
        // header params
        if ($signature !== null) {
            $headerParams['Signature'] = ObjectSerializer::toHeaderValue($signature);
        }
        // header params
        if ($tpp_signature_certificate !== null) {
            $headerParams['TPP-Signature-Certificate'] = ObjectSerializer::toHeaderValue($tpp_signature_certificate);
        }
        // header params
        if ($psu_id !== null) {
            $headerParams['PSU-ID'] = ObjectSerializer::toHeaderValue($psu_id);
        }
        // header params
        if ($psu_id_type !== null) {
            $headerParams['PSU-ID-Type'] = ObjectSerializer::toHeaderValue($psu_id_type);
        }
        // header params
        if ($psu_corporate_id !== null) {
            $headerParams['PSU-Corporate-ID'] = ObjectSerializer::toHeaderValue($psu_corporate_id);
        }
        // header params
        if ($psu_corporate_id_type !== null) {
            $headerParams['PSU-Corporate-ID-Type'] = ObjectSerializer::toHeaderValue($psu_corporate_id_type);
        }
        // header params
        if ($psu_ip_address !== null) {
            $headerParams['PSU-IP-Address'] = ObjectSerializer::toHeaderValue($psu_ip_address);
        }
        // header params
        if ($psu_ip_port !== null) {
            $headerParams['PSU-IP-Port'] = ObjectSerializer::toHeaderValue($psu_ip_port);
        }
        // header params
        if ($psu_accept !== null) {
            $headerParams['PSU-Accept'] = ObjectSerializer::toHeaderValue($psu_accept);
        }
        // header params
        if ($psu_accept_charset !== null) {
            $headerParams['PSU-Accept-Charset'] = ObjectSerializer::toHeaderValue($psu_accept_charset);
        }
        // header params
        if ($psu_accept_encoding !== null) {
            $headerParams['PSU-Accept-Encoding'] = ObjectSerializer::toHeaderValue($psu_accept_encoding);
        }
        // header params
        if ($psu_accept_language !== null) {
            $headerParams['PSU-Accept-Language'] = ObjectSerializer::toHeaderValue($psu_accept_language);
        }
        // header params
        if ($psu_user_agent !== null) {
            $headerParams['PSU-User-Agent'] = ObjectSerializer::toHeaderValue($psu_user_agent);
        }
        // header params
        if ($psu_http_method !== null) {
            $headerParams['PSU-Http-Method'] = ObjectSerializer::toHeaderValue($psu_http_method);
        }
        // header params
        if ($psu_device_id !== null) {
            $headerParams['PSU-Device-ID'] = ObjectSerializer::toHeaderValue($psu_device_id);
        }
        // header params
        if ($psu_geo_location !== null) {
            $headerParams['PSU-Geo-Location'] = ObjectSerializer::toHeaderValue($psu_geo_location);
        }

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                '{' . 'organisation' . '}',
                ObjectSerializer::toPathValue($organisation),
                $resourcePath
            );
        }
        // path params
        if ($payment_service !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-service' . '}',
                ObjectSerializer::toPathValue($payment_service),
                $resourcePath
            );
        }
        // path params
        if ($payment_product !== null) {
            $resourcePath = str_replace(
                '{' . 'payment-product' . '}',
                ObjectSerializer::toPathValue($payment_product),
                $resourcePath
            );
        }
        // path params
        if ($payment_id !== null) {
            $resourcePath = str_replace(
                '{' . 'paymentId' . '}',
                ObjectSerializer::toPathValue($payment_id),
                $resourcePath
            );
        }
        // path params
        if ($authorisation_id !== null) {
            $resourcePath = str_replace(
                '{' . 'authorisationId' . '}',
                ObjectSerializer::toPathValue($authorisation_id),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($unknown_base_type)) {
            $_tempBody = $unknown_base_type;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json', ]
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json', ],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'PUT',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
