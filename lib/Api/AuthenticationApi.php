<?php
/**
 * AuthenticationApi
 * PHP version 7.2
 *
 * @category Class
 * @package  BankIO\Sdk
 * @author   bankIO
 * @link     https://bankio.co.uk/bankio-link/
 */

/**
 * bankIO NextGenPSD2 XS2A Framework
 *
 * # Summary The **NextGenPSD2** *Framework Version 1.3.6* (with errata) offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a PSD2 comlient API in addition to the elements defined in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API has to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space
 *
 * The version of the OpenAPI document: 1.3.6_2020-05-28
 * Contact: hello@bankio.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BankIO\Sdk\Api;

use Http\Client\HttpClient;
use Http\Client\HttpAsyncClient;
use Http\Message\MessageFactory;
use Http\Discovery\HttpClientDiscovery;
use Http\Discovery\HttpAsyncClientDiscovery;
use Http\Discovery\MessageFactoryDiscovery;
use Http\Discovery\StreamFactoryDiscovery;
use Http\Client\Exception\NetworkException;
use Http\Client\Exception\HttpException;
use Http\Message\StreamFactory;
use Http\Message\MultipartStream\MultipartStreamBuilder;
use Psr\Http\Message\RequestInterface;
use BankIO\Sdk\ApiException;
use BankIO\Sdk\Configuration;
use BankIO\Sdk\HeaderSelector;
use BankIO\Sdk\ObjectSerializer;

/**
 * AuthenticationApi Class Doc Comment
 *
 * @category Class
 * @package  BankIO\Sdk
 * @author   bankIO
 * @link     https://bankio.co.uk/bankio-link/
 */
class AuthenticationApi
{
    /**
     * @var HttpClient
     */
    protected $client;

    /**
     * @var HttpAsyncClient
     */
    protected $asyncClient;

    /**
     * @var MessageFactory
     */
    protected $messageFactory;

    /**
     * @var StreamFactory
     */
    protected $streamFactory;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param HttpClient $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        HttpClient $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        MessageFactory $messageFactory = null,
        StreamFactory $streamFactory = null,
        $host_index = 0
    ) {
        $this->client = $client ?: HttpClientDiscovery::find();
        // $this->asyncClient = $asyncClient ?: HttpAsyncClientDiscovery::find();
        $this->messageFactory = $messageFactory ?: MessageFactoryDiscovery::find();
        $this->streamFactory = $streamFactory ?: StreamFactoryDiscovery::find();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation authorize
     *
     * Authenticate a user
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $client_id A client ID obtained from the [Dashboard](https://dashboard.bankio.com/). (required)
     * @param  string $response_type The OIDC response type to use for this authentication flow. Valid choices are &#x60;code&#x60;, &#x60;id_token&#x60;, &#x60;token&#x60;, &#x60;token id_token&#x60;, &#x60;code id_token&#x60; &#x60;code token&#x60; and &#x60;code token id_token&#x60;, but a client can be configured with a more restricted set. (required)
     * @param  string $scope The space-separated identity claims to request from the end-user. Always include &#x60;openid&#x60; as a scope for compatibility with OIDC. (required)
     * @param  string $redirect_uri The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (&#x60;response_mode&#x3D;query&#x60;) or as fragments (&#x60;response_mode&#x3D;fragment&#x60;). Unless the client is in test-mode this must be one of the registered redirect URLs. (required)
     * @param  string $state An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks. (required)
     * @param  string $response_mode Whether to append parameters to the redirect URL in the query string (&#x60;query&#x60;) or as fragments (&#x60;fragment&#x60;). This option usually has a sensible default for each of the response types. (optional)
     * @param  string $nonce An nonce provided by the client (and opaque to bankIO Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks. (optional)
     * @param  string $display The authentication display mode, which can be one of &#x60;page&#x60;, &#x60;popup&#x60; or &#x60;modal&#x60;. Defaults to &#x60;page&#x60;. (optional, default to 'page')
     * @param  string $prompt Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: &#x60;none&#x60;, &#x60;login&#x60;, &#x60;consent&#x60;. If &#x60;consent&#x60; the end-user is asked to (re)confirm what claims they share. Use &#x60;none&#x60; to check for an active session. (optional, default to 'login')
     * @param  int $max_age Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated. (optional, default to 0)
     * @param  string $ui_locales Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment. (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return void
     */
    public function authorize($associative_array)
    {
        $this->authorizeWithHttpInfo($associative_array);
    }

    /**
     * Operation authorizeWithHttpInfo
     *
     * Authenticate a user
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $client_id A client ID obtained from the [Dashboard](https://dashboard.bankio.com/). (required)
     * @param  string $response_type The OIDC response type to use for this authentication flow. Valid choices are &#x60;code&#x60;, &#x60;id_token&#x60;, &#x60;token&#x60;, &#x60;token id_token&#x60;, &#x60;code id_token&#x60; &#x60;code token&#x60; and &#x60;code token id_token&#x60;, but a client can be configured with a more restricted set. (required)
     * @param  string $scope The space-separated identity claims to request from the end-user. Always include &#x60;openid&#x60; as a scope for compatibility with OIDC. (required)
     * @param  string $redirect_uri The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (&#x60;response_mode&#x3D;query&#x60;) or as fragments (&#x60;response_mode&#x3D;fragment&#x60;). Unless the client is in test-mode this must be one of the registered redirect URLs. (required)
     * @param  string $state An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks. (required)
     * @param  string $response_mode Whether to append parameters to the redirect URL in the query string (&#x60;query&#x60;) or as fragments (&#x60;fragment&#x60;). This option usually has a sensible default for each of the response types. (optional)
     * @param  string $nonce An nonce provided by the client (and opaque to bankIO Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks. (optional)
     * @param  string $display The authentication display mode, which can be one of &#x60;page&#x60;, &#x60;popup&#x60; or &#x60;modal&#x60;. Defaults to &#x60;page&#x60;. (optional, default to 'page')
     * @param  string $prompt Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: &#x60;none&#x60;, &#x60;login&#x60;, &#x60;consent&#x60;. If &#x60;consent&#x60; the end-user is asked to (re)confirm what claims they share. Use &#x60;none&#x60; to check for an active session. (optional, default to 'login')
     * @param  int $max_age Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated. (optional, default to 0)
     * @param  string $ui_locales Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment. (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of null, HTTP status code, HTTP response headers (array of strings)
     */
    public function authorizeWithHttpInfo($associative_array)
    {
        $request = $this->authorizeRequest($associative_array);

        try {
            // $options = $this->createHttpClientOption();
            try {
                $response = $this->client->sendRequest($request);
            } catch (HttpException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (NetworkException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            return [null, $statusCode, $response->getHeaders()];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
            }
            throw $e;
        }
    }

    /**
     * Operation authorizeAsync
     *
     * Authenticate a user
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $client_id A client ID obtained from the [Dashboard](https://dashboard.bankio.com/). (required)
     * @param  string $response_type The OIDC response type to use for this authentication flow. Valid choices are &#x60;code&#x60;, &#x60;id_token&#x60;, &#x60;token&#x60;, &#x60;token id_token&#x60;, &#x60;code id_token&#x60; &#x60;code token&#x60; and &#x60;code token id_token&#x60;, but a client can be configured with a more restricted set. (required)
     * @param  string $scope The space-separated identity claims to request from the end-user. Always include &#x60;openid&#x60; as a scope for compatibility with OIDC. (required)
     * @param  string $redirect_uri The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (&#x60;response_mode&#x3D;query&#x60;) or as fragments (&#x60;response_mode&#x3D;fragment&#x60;). Unless the client is in test-mode this must be one of the registered redirect URLs. (required)
     * @param  string $state An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks. (required)
     * @param  string $response_mode Whether to append parameters to the redirect URL in the query string (&#x60;query&#x60;) or as fragments (&#x60;fragment&#x60;). This option usually has a sensible default for each of the response types. (optional)
     * @param  string $nonce An nonce provided by the client (and opaque to bankIO Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks. (optional)
     * @param  string $display The authentication display mode, which can be one of &#x60;page&#x60;, &#x60;popup&#x60; or &#x60;modal&#x60;. Defaults to &#x60;page&#x60;. (optional, default to 'page')
     * @param  string $prompt Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: &#x60;none&#x60;, &#x60;login&#x60;, &#x60;consent&#x60;. If &#x60;consent&#x60; the end-user is asked to (re)confirm what claims they share. Use &#x60;none&#x60; to check for an active session. (optional, default to 'login')
     * @param  int $max_age Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated. (optional, default to 0)
     * @param  string $ui_locales Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \Http\Promise\Promise
     */
    public function authorizeAsync($associative_array)
    {
        return $this->authorizeAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation authorizeAsyncWithHttpInfo
     *
     * Authenticate a user
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $client_id A client ID obtained from the [Dashboard](https://dashboard.bankio.com/). (required)
     * @param  string $response_type The OIDC response type to use for this authentication flow. Valid choices are &#x60;code&#x60;, &#x60;id_token&#x60;, &#x60;token&#x60;, &#x60;token id_token&#x60;, &#x60;code id_token&#x60; &#x60;code token&#x60; and &#x60;code token id_token&#x60;, but a client can be configured with a more restricted set. (required)
     * @param  string $scope The space-separated identity claims to request from the end-user. Always include &#x60;openid&#x60; as a scope for compatibility with OIDC. (required)
     * @param  string $redirect_uri The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (&#x60;response_mode&#x3D;query&#x60;) or as fragments (&#x60;response_mode&#x3D;fragment&#x60;). Unless the client is in test-mode this must be one of the registered redirect URLs. (required)
     * @param  string $state An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks. (required)
     * @param  string $response_mode Whether to append parameters to the redirect URL in the query string (&#x60;query&#x60;) or as fragments (&#x60;fragment&#x60;). This option usually has a sensible default for each of the response types. (optional)
     * @param  string $nonce An nonce provided by the client (and opaque to bankIO Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks. (optional)
     * @param  string $display The authentication display mode, which can be one of &#x60;page&#x60;, &#x60;popup&#x60; or &#x60;modal&#x60;. Defaults to &#x60;page&#x60;. (optional, default to 'page')
     * @param  string $prompt Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: &#x60;none&#x60;, &#x60;login&#x60;, &#x60;consent&#x60;. If &#x60;consent&#x60; the end-user is asked to (re)confirm what claims they share. Use &#x60;none&#x60; to check for an active session. (optional, default to 'login')
     * @param  int $max_age Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated. (optional, default to 0)
     * @param  string $ui_locales Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \Http\Promise\Promise
     */
    public function authorizeAsyncWithHttpInfo($associative_array)
    {
        $returnType = '';
        $request = $this->authorizeRequest($associative_array);

        // $this->createHttpClientOption()
        return $this->client
            ->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    return [null, $response->getStatusCode(), $response->getHeaders()];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'authorize'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $client_id A client ID obtained from the [Dashboard](https://dashboard.bankio.com/). (required)
     * @param  string $response_type The OIDC response type to use for this authentication flow. Valid choices are &#x60;code&#x60;, &#x60;id_token&#x60;, &#x60;token&#x60;, &#x60;token id_token&#x60;, &#x60;code id_token&#x60; &#x60;code token&#x60; and &#x60;code token id_token&#x60;, but a client can be configured with a more restricted set. (required)
     * @param  string $scope The space-separated identity claims to request from the end-user. Always include &#x60;openid&#x60; as a scope for compatibility with OIDC. (required)
     * @param  string $redirect_uri The location to redirect to after (un)successful authentication. See OIDC for the parameters passed in the query string (&#x60;response_mode&#x3D;query&#x60;) or as fragments (&#x60;response_mode&#x3D;fragment&#x60;). Unless the client is in test-mode this must be one of the registered redirect URLs. (required)
     * @param  string $state An opaque string that will be passed back to the redirect URL and therefore can be used to communicate client side state and prevent CSRF attacks. (required)
     * @param  string $response_mode Whether to append parameters to the redirect URL in the query string (&#x60;query&#x60;) or as fragments (&#x60;fragment&#x60;). This option usually has a sensible default for each of the response types. (optional)
     * @param  string $nonce An nonce provided by the client (and opaque to bankIO Connect) that will be included in any ID Token generated for this session. Clients should use the nonce to mitigate replay attacks. (optional)
     * @param  string $display The authentication display mode, which can be one of &#x60;page&#x60;, &#x60;popup&#x60; or &#x60;modal&#x60;. Defaults to &#x60;page&#x60;. (optional, default to 'page')
     * @param  string $prompt Space-delimited, case sensitive list of ASCII string values that specifies whether the Authorization Server prompts the End-User for reauthentication and consent. The supported values are: &#x60;none&#x60;, &#x60;login&#x60;, &#x60;consent&#x60;. If &#x60;consent&#x60; the end-user is asked to (re)confirm what claims they share. Use &#x60;none&#x60; to check for an active session. (optional, default to 'login')
     * @param  int $max_age Specifies the allowable elapsed time in seconds since the last time the end-user was actively authenticated. (optional, default to 0)
     * @param  string $ui_locales Specifies the preferred language to use on the authorization page, as a space-separated list of BCP47 language tags. Ignored at the moment. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    protected function authorizeRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $client_id = array_key_exists('client_id', $associative_array) ? $associative_array['client_id'] : null;
        $response_type = array_key_exists('response_type', $associative_array) ? $associative_array['response_type'] : null;
        $scope = array_key_exists('scope', $associative_array) ? $associative_array['scope'] : null;
        $redirect_uri = array_key_exists('redirect_uri', $associative_array) ? $associative_array['redirect_uri'] : null;
        $state = array_key_exists('state', $associative_array) ? $associative_array['state'] : null;
        $response_mode = array_key_exists('response_mode', $associative_array) ? $associative_array['response_mode'] : null;
        $nonce = array_key_exists('nonce', $associative_array) ? $associative_array['nonce'] : null;
        $display = array_key_exists('display', $associative_array) ? $associative_array['display'] : 'page';
        $prompt = array_key_exists('prompt', $associative_array) ? $associative_array['prompt'] : 'login';
        $max_age = array_key_exists('max_age', $associative_array) ? $associative_array['max_age'] : 0;
        $ui_locales = array_key_exists('ui_locales', $associative_array) ? $associative_array['ui_locales'] : null;

        // verify the required parameter 'client_id' is set
        if ($client_id === null || (is_array($client_id) && count($client_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $client_id when calling authorize'
            );
        }
        // verify the required parameter 'response_type' is set
        if ($response_type === null || (is_array($response_type) && count($response_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $response_type when calling authorize'
            );
        }
        // verify the required parameter 'scope' is set
        if ($scope === null || (is_array($scope) && count($scope) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $scope when calling authorize'
            );
        }
        // verify the required parameter 'redirect_uri' is set
        if ($redirect_uri === null || (is_array($redirect_uri) && count($redirect_uri) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $redirect_uri when calling authorize'
            );
        }
        // verify the required parameter 'state' is set
        if ($state === null || (is_array($state) && count($state) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $state when calling authorize'
            );
        }

        $resourcePath = '/api/auth/authorize';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;

        // query params
        if ($client_id !== null) {
            if('form' === 'form' && is_array($client_id)) {
                foreach($client_id as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['client_id'] = $client_id;
            }
        }
        // query params
        if ($response_type !== null) {
            if('form' === 'form' && is_array($response_type)) {
                foreach($response_type as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['response_type'] = $response_type;
            }
        }
        // query params
        if ($scope !== null) {
            if('form' === 'form' && is_array($scope)) {
                foreach($scope as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['scope'] = $scope;
            }
        }
        // query params
        if ($redirect_uri !== null) {
            if('form' === 'form' && is_array($redirect_uri)) {
                foreach($redirect_uri as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['redirect_uri'] = $redirect_uri;
            }
        }
        // query params
        if ($state !== null) {
            if('form' === 'form' && is_array($state)) {
                foreach($state as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['state'] = $state;
            }
        }
        // query params
        if ($response_mode !== null) {
            if('form' === 'form' && is_array($response_mode)) {
                foreach($response_mode as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['response_mode'] = $response_mode;
            }
        }
        // query params
        if ($nonce !== null) {
            if('form' === 'form' && is_array($nonce)) {
                foreach($nonce as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['nonce'] = $nonce;
            }
        }
        // query params
        if ($display !== null) {
            if('form' === 'form' && is_array($display)) {
                foreach($display as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['display'] = $display;
            }
        }
        // query params
        if ($prompt !== null) {
            if('form' === 'form' && is_array($prompt)) {
                foreach($prompt as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['prompt'] = $prompt;
            }
        }
        // query params
        if ($max_age !== null) {
            if('form' === 'form' && is_array($max_age)) {
                foreach($max_age as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['max_age'] = $max_age;
            }
        }
        // query params
        if ($ui_locales !== null) {
            if('form' === 'form' && is_array($ui_locales)) {
                foreach($ui_locales as $key => $value) {
                    $queryParams[$key] = $value;
                }
            }
            else {
                $queryParams['ui_locales'] = $ui_locales;
            }
        }



        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                []
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                [],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $builder = new MultipartStreamBuilder($streamFactory);
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $builder->addResource($formParamName, $formParamValueItem);
                    }
                }
                // for HTTP post (form)
                $httpBody = $builder->build();

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = http_build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = http_build_query($queryParams);
        return $this->messageFactory->createRequest(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation token
     *
     * Request Access Tokens
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $grant_type Type of grant. (required)
     * @param  string $client_id Application client ID, may be provided either within formData or using HTTP Basic Authentication. (optional)
     * @param  string $client_secret Application secret, may be provided either within formData or using HTTP Basic Authentication. (optional)
     * @param  string $code Authorization code provided by the /oauth2/authorize endpoint. (optional)
     * @param  string $redirect_uri Required only if the redirect_uri parameter was included in the authorization request /oauth2/authorize. Their values MUST be identical. (optional)
     * @param  string $scope Scope being requested. (optional)
     * @param  string $refresh_token The refresh token that the client wants to exchange for a new access token (refresh_token grant_type). (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BankIO\Sdk\Model\Token|\BankIO\Sdk\Model\OAuth2Error|\BankIO\Sdk\Model\OAuth2Error
     */
    public function token($associative_array)
    {
        list($response) = $this->tokenWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation tokenWithHttpInfo
     *
     * Request Access Tokens
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $grant_type Type of grant. (required)
     * @param  string $client_id Application client ID, may be provided either within formData or using HTTP Basic Authentication. (optional)
     * @param  string $client_secret Application secret, may be provided either within formData or using HTTP Basic Authentication. (optional)
     * @param  string $code Authorization code provided by the /oauth2/authorize endpoint. (optional)
     * @param  string $redirect_uri Required only if the redirect_uri parameter was included in the authorization request /oauth2/authorize. Their values MUST be identical. (optional)
     * @param  string $scope Scope being requested. (optional)
     * @param  string $refresh_token The refresh token that the client wants to exchange for a new access token (refresh_token grant_type). (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BankIO\Sdk\Model\Token|\BankIO\Sdk\Model\OAuth2Error|\BankIO\Sdk\Model\OAuth2Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function tokenWithHttpInfo($associative_array)
    {
        $request = $this->tokenRequest($associative_array);

        try {
            // $options = $this->createHttpClientOption();
            try {
                $response = $this->client->sendRequest($request);
            } catch (HttpException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (NetworkException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BankIO\Sdk\Model\Token' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Token', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BankIO\Sdk\Model\OAuth2Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\OAuth2Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BankIO\Sdk\Model\OAuth2Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\OAuth2Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BankIO\Sdk\Model\Token';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Token',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\OAuth2Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\OAuth2Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation tokenAsync
     *
     * Request Access Tokens
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $grant_type Type of grant. (required)
     * @param  string $client_id Application client ID, may be provided either within formData or using HTTP Basic Authentication. (optional)
     * @param  string $client_secret Application secret, may be provided either within formData or using HTTP Basic Authentication. (optional)
     * @param  string $code Authorization code provided by the /oauth2/authorize endpoint. (optional)
     * @param  string $redirect_uri Required only if the redirect_uri parameter was included in the authorization request /oauth2/authorize. Their values MUST be identical. (optional)
     * @param  string $scope Scope being requested. (optional)
     * @param  string $refresh_token The refresh token that the client wants to exchange for a new access token (refresh_token grant_type). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \Http\Promise\Promise
     */
    public function tokenAsync($associative_array)
    {
        return $this->tokenAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation tokenAsyncWithHttpInfo
     *
     * Request Access Tokens
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $grant_type Type of grant. (required)
     * @param  string $client_id Application client ID, may be provided either within formData or using HTTP Basic Authentication. (optional)
     * @param  string $client_secret Application secret, may be provided either within formData or using HTTP Basic Authentication. (optional)
     * @param  string $code Authorization code provided by the /oauth2/authorize endpoint. (optional)
     * @param  string $redirect_uri Required only if the redirect_uri parameter was included in the authorization request /oauth2/authorize. Their values MUST be identical. (optional)
     * @param  string $scope Scope being requested. (optional)
     * @param  string $refresh_token The refresh token that the client wants to exchange for a new access token (refresh_token grant_type). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \Http\Promise\Promise
     */
    public function tokenAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\BankIO\Sdk\Model\Token';
        $request = $this->tokenRequest($associative_array);

        // $this->createHttpClientOption()
        return $this->client
            ->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'token'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     * @param  string $grant_type Type of grant. (required)
     * @param  string $client_id Application client ID, may be provided either within formData or using HTTP Basic Authentication. (optional)
     * @param  string $client_secret Application secret, may be provided either within formData or using HTTP Basic Authentication. (optional)
     * @param  string $code Authorization code provided by the /oauth2/authorize endpoint. (optional)
     * @param  string $redirect_uri Required only if the redirect_uri parameter was included in the authorization request /oauth2/authorize. Their values MUST be identical. (optional)
     * @param  string $scope Scope being requested. (optional)
     * @param  string $refresh_token The refresh token that the client wants to exchange for a new access token (refresh_token grant_type). (optional)
     *
     * @throws \InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    protected function tokenRequest($associative_array)
    {
        // unbox the parameters from the associative array
        $grant_type = array_key_exists('grant_type', $associative_array) ? $associative_array['grant_type'] : null;
        $client_id = array_key_exists('client_id', $associative_array) ? $associative_array['client_id'] : null;
        $client_secret = array_key_exists('client_secret', $associative_array) ? $associative_array['client_secret'] : null;
        $code = array_key_exists('code', $associative_array) ? $associative_array['code'] : null;
        $redirect_uri = array_key_exists('redirect_uri', $associative_array) ? $associative_array['redirect_uri'] : null;
        $scope = array_key_exists('scope', $associative_array) ? $associative_array['scope'] : null;
        $refresh_token = array_key_exists('refresh_token', $associative_array) ? $associative_array['refresh_token'] : null;

        // verify the required parameter 'grant_type' is set
        if ($grant_type === null || (is_array($grant_type) && count($grant_type) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $grant_type when calling token'
            );
        }

        $resourcePath = '/api/auth/token';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // form params
        if ($grant_type !== null) {
            $formParams['grant_type'] = ObjectSerializer::toFormValue($grant_type);
        }
        // form params
        if ($client_id !== null) {
            $formParams['client_id'] = ObjectSerializer::toFormValue($client_id);
        }
        // form params
        if ($client_secret !== null) {
            $formParams['client_secret'] = ObjectSerializer::toFormValue($client_secret);
        }
        // form params
        if ($code !== null) {
            $formParams['code'] = ObjectSerializer::toFormValue($code);
        }
        // form params
        if ($redirect_uri !== null) {
            $formParams['redirect_uri'] = ObjectSerializer::toFormValue($redirect_uri);
        }
        // form params
        if ($scope !== null) {
            $formParams['scope'] = ObjectSerializer::toFormValue($scope);
        }
        // form params
        if ($refresh_token !== null) {
            $formParams['refresh_token'] = ObjectSerializer::toFormValue($refresh_token);
        }
        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/x-www-form-urlencoded', 'application/json', 'application/problem+json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/x-www-form-urlencoded', 'application/json', 'application/problem+json', 'text/html'],
                ['application/x-www-form-urlencoded']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $builder = new MultipartStreamBuilder($streamFactory);
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $builder->addResource($formParamName, $formParamValueItem);
                    }
                }
                // for HTTP post (form)
                $httpBody = $builder->build();

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = http_build_query($formParams);
            }
        }

        // this endpoint requires HTTP basic authentication
        if (!empty($this->config->getUsername()) || !(empty($this->config->getPassword()))) {
            $headers['Authorization'] = 'Basic ' . base64_encode($this->config->getUsername() . ":" . $this->config->getPassword());
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = http_build_query($queryParams);
        return $this->messageFactory->createRequest(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Operation userInfo
     *
     * Retrieve user profile
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BankIO\Sdk\Model\UserInfo|\BankIO\Sdk\Model\OAuth2Error|\BankIO\Sdk\Model\OAuth2Error
     */
    public function userInfo($associative_array)
    {
        list($response) = $this->userInfoWithHttpInfo($associative_array);
        return $response;
    }

    /**
     * Operation userInfoWithHttpInfo
     *
     * Retrieve user profile
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BankIO\Sdk\Model\UserInfo|\BankIO\Sdk\Model\OAuth2Error|\BankIO\Sdk\Model\OAuth2Error, HTTP status code, HTTP response headers (array of strings)
     */
    public function userInfoWithHttpInfo($associative_array)
    {
        $request = $this->userInfoRequest($associative_array);

        try {
            // $options = $this->createHttpClientOption();
            try {
                $response = $this->client->sendRequest($request);
            } catch (HttpException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            } catch (NetworkException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode()
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BankIO\Sdk\Model\UserInfo' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\UserInfo', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BankIO\Sdk\Model\OAuth2Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\OAuth2Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                default:
                    if ('\BankIO\Sdk\Model\OAuth2Error' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\OAuth2Error', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BankIO\Sdk\Model\UserInfo';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\UserInfo',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\OAuth2Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                default:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\OAuth2Error',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation userInfoAsync
     *
     * Retrieve user profile
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     *
     * @throws \InvalidArgumentException
     * @return \Http\Promise\Promise
     */
    public function userInfoAsync($associative_array)
    {
        return $this->userInfoAsyncWithHttpInfo($associative_array)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation userInfoAsyncWithHttpInfo
     *
     * Retrieve user profile
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     *
     * @throws \InvalidArgumentException
     * @return \Http\Promise\Promise
     */
    public function userInfoAsyncWithHttpInfo($associative_array)
    {
        $returnType = '\BankIO\Sdk\Model\UserInfo';
        $request = $this->userInfoRequest($associative_array);

        // $this->createHttpClientOption()
        return $this->client
            ->sendAsyncRequest($request)
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'userInfo'
     *
     * Note: the input parameter is an associative array with the keys listed as the parameter name below
     *
     *
     * @throws \InvalidArgumentException
     * @return \Psr\Http\Message\RequestInterface
     */
    protected function userInfoRequest($associative_array)
    {
        // unbox the parameters from the associative array


        $resourcePath = '/api/auth/me';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;




        // body params
        $_tempBody = null;

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/x-www-form-urlencoded', 'application/json', 'application/problem+json', 'text/html']
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/x-www-form-urlencoded', 'application/json', 'application/problem+json', 'text/html'],
                []
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $builder = new MultipartStreamBuilder($streamFactory);
                foreach ($formParams as $formParamName => $formParamValue) {
                    $formParamValueItems = is_array($formParamValue) ? $formParamValue : [$formParamValue];
                    foreach ($formParamValueItems as $formParamValueItem) {
                        $builder->addResource($formParamName, $formParamValueItem);
                    }
                }
                // for HTTP post (form)
                $httpBody = $builder->build();

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = http_build_query($formParams);
            }
        }

        // this endpoint requires OAuth (access token)
        if ($this->config->getAccessToken() !== null) {
            $headers['Authorization'] = 'Bearer ' . $this->config->getAccessToken();
        }

        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = http_build_query($queryParams);
        return $this->messageFactory->createRequest(
            'GET',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
        }

        return $options;
    }

    /**
    * Safely opens a PHP stream resource using a filename.
    *
    * When fopen fails, PHP normally raises a warning. This function adds an
    * error handler that checks for errors and throws an exception instead.
    *
    * @param string $filename File to open
    * @param string $mode     Mode used to open the file
    *
    * @return resource
    *
    * @throws \RuntimeException if the file cannot be opened
    */
    protected function try_fopen(string $filename, string $mode)
    {
        $ex = null;
        set_error_handler(function (int $errno, string $errstr) use ($filename, $mode, &$ex) {
            $ex = new \RuntimeException(sprintf(
                'Unable to open %s using mode %s: %s',
                $filename,
                $mode,
                $errstr
            ));
        });

        /** @var resource $handle */
        $handle = fopen($filename, $mode);
        restore_error_handler();

        if ($ex) {
            /** @var $ex \RuntimeException */
            throw $ex;
        }

        return $handle;
    }
}
