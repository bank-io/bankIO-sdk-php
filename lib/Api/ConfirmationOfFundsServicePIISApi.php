<?php
/**
 * ConfirmationOfFundsServicePIISApi
 * PHP version 7.2
 *
 * @category Class
 * @package  BankIO\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * bankIO NextGenPSD2 XS2A Framework
 *
 * # Summary The **NextGenPSD2** *Framework Version 1.3.6* (with errata) offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a PSD2 comlient API in addition to the elements defined in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API has to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space
 *
 * The version of the OpenAPI document: 1.3.6_2020-05-28
 * Contact: info@berlin-group.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BankIO\Sdk\Api;

use GuzzleHttp\Client;
use GuzzleHttp\ClientInterface;
use GuzzleHttp\Exception\RequestException;
use GuzzleHttp\Psr7\MultipartStream;
use GuzzleHttp\Psr7\Request;
use GuzzleHttp\RequestOptions;
use BankIO\Sdk\ApiException;
use BankIO\Sdk\Configuration;
use BankIO\Sdk\HeaderSelector;
use BankIO\Sdk\ObjectSerializer;

/**
 * ConfirmationOfFundsServicePIISApi Class Doc Comment
 *
 * @category Class
 * @package  BankIO\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class ConfirmationOfFundsServicePIISApi
{
    /**
     * @var ClientInterface
     */
    protected $client;

    /**
     * @var Configuration
     */
    protected $config;

    /**
     * @var HeaderSelector
     */
    protected $headerSelector;

    /**
     * @var int Host index
     */
    protected $hostIndex;

    /**
     * @param ClientInterface $client
     * @param Configuration   $config
     * @param HeaderSelector  $selector
     * @param int             $host_index (Optional) host index to select the list of hosts if defined in the OpenAPI spec
     */
    public function __construct(
        ClientInterface $client = null,
        Configuration $config = null,
        HeaderSelector $selector = null,
        $host_index = 0
    ) {
        $this->client = $client ?: new Client();
        $this->config = $config ?: new Configuration();
        $this->headerSelector = $selector ?: new HeaderSelector();
        $this->hostIndex = $host_index;
    }

    /**
     * Set the host index
     *
     * @param  int Host index (required)
     */
    public function setHostIndex($host_index)
    {
        $this->hostIndex = $host_index;
    }

    /**
     * Get the host index
     *
     * @return Host index
     */
    public function getHostIndex()
    {
        return $this->hostIndex;
    }

    /**
     * @return Configuration
     */
    public function getConfig()
    {
        return $this->config;
    }

    /**
     * Operation checkAvailabilityOfFunds
     *
     * Confirmation of funds request
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  \BankIO\Sdk\Model\ConfirmationOfFunds $confirmation_of_funds Request body for a confirmation of funds request. (required)
     * @param  string $authorization This field  might be used in case where a consent was agreed between ASPSP and PSU through an OAuth2 based protocol,  facilitated by the TPP. (optional)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return \BankIO\Sdk\Model\InlineResponse2003|\BankIO\Sdk\Model\Error400NGAIS|\BankIO\Sdk\Model\Error401NGPIIS|\BankIO\Sdk\Model\Error403NGPIIS|\BankIO\Sdk\Model\Error404NGPIIS|\BankIO\Sdk\Model\Error405NGPIIS|\BankIO\Sdk\Model\Error409NGPIIS
     */
    public function checkAvailabilityOfFunds($organisation, $x_request_id, $confirmation_of_funds, $authorization = null, $digest = null, $signature = null, $tpp_signature_certificate = null)
    {
        list($response) = $this->checkAvailabilityOfFundsWithHttpInfo($organisation, $x_request_id, $confirmation_of_funds, $authorization, $digest, $signature, $tpp_signature_certificate);
        return $response;
    }

    /**
     * Operation checkAvailabilityOfFundsWithHttpInfo
     *
     * Confirmation of funds request
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  \BankIO\Sdk\Model\ConfirmationOfFunds $confirmation_of_funds Request body for a confirmation of funds request. (required)
     * @param  string $authorization This field  might be used in case where a consent was agreed between ASPSP and PSU through an OAuth2 based protocol,  facilitated by the TPP. (optional)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     *
     * @throws \BankIO\Sdk\ApiException on non-2xx response
     * @throws \InvalidArgumentException
     * @return array of \BankIO\Sdk\Model\InlineResponse2003|\BankIO\Sdk\Model\Error400NGAIS|\BankIO\Sdk\Model\Error401NGPIIS|\BankIO\Sdk\Model\Error403NGPIIS|\BankIO\Sdk\Model\Error404NGPIIS|\BankIO\Sdk\Model\Error405NGPIIS|\BankIO\Sdk\Model\Error409NGPIIS, HTTP status code, HTTP response headers (array of strings)
     */
    public function checkAvailabilityOfFundsWithHttpInfo($organisation, $x_request_id, $confirmation_of_funds, $authorization = null, $digest = null, $signature = null, $tpp_signature_certificate = null)
    {
        $request = $this->checkAvailabilityOfFundsRequest($organisation, $x_request_id, $confirmation_of_funds, $authorization, $digest, $signature, $tpp_signature_certificate);

        try {
            $options = $this->createHttpClientOption();
            try {
                $response = $this->client->send($request, $options);
            } catch (RequestException $e) {
                throw new ApiException(
                    "[{$e->getCode()}] {$e->getMessage()}",
                    $e->getCode(),
                    $e->getResponse() ? $e->getResponse()->getHeaders() : null,
                    $e->getResponse() ? (string) $e->getResponse()->getBody() : null
                );
            }

            $statusCode = $response->getStatusCode();

            if ($statusCode < 200 || $statusCode > 299) {
                throw new ApiException(
                    sprintf(
                        '[%d] Error connecting to the API (%s)',
                        $statusCode,
                        $request->getUri()
                    ),
                    $statusCode,
                    $response->getHeaders(),
                    $response->getBody()
                );
            }

            $responseBody = $response->getBody();
            switch($statusCode) {
                case 200:
                    if ('\BankIO\Sdk\Model\InlineResponse2003' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\InlineResponse2003', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 400:
                    if ('\BankIO\Sdk\Model\Error400NGAIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error400NGAIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 401:
                    if ('\BankIO\Sdk\Model\Error401NGPIIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error401NGPIIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 403:
                    if ('\BankIO\Sdk\Model\Error403NGPIIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error403NGPIIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 404:
                    if ('\BankIO\Sdk\Model\Error404NGPIIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error404NGPIIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 405:
                    if ('\BankIO\Sdk\Model\Error405NGPIIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error405NGPIIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                case 409:
                    if ('\BankIO\Sdk\Model\Error409NGPIIS' === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, '\BankIO\Sdk\Model\Error409NGPIIS', []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
            }

            $returnType = '\BankIO\Sdk\Model\InlineResponse2003';
            $responseBody = $response->getBody();
            if ($returnType === '\SplFileObject') {
                $content = $responseBody; //stream goes to serializer
            } else {
                $content = (string) $responseBody;
            }

            return [
                ObjectSerializer::deserialize($content, $returnType, []),
                $response->getStatusCode(),
                $response->getHeaders()
            ];

        } catch (ApiException $e) {
            switch ($e->getCode()) {
                case 200:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\InlineResponse2003',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 400:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error400NGAIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 401:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error401NGPIIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 403:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error403NGPIIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 404:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error404NGPIIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 405:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error405NGPIIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
                case 409:
                    $data = ObjectSerializer::deserialize(
                        $e->getResponseBody(),
                        '\BankIO\Sdk\Model\Error409NGPIIS',
                        $e->getResponseHeaders()
                    );
                    $e->setResponseObject($data);
                    break;
            }
            throw $e;
        }
    }

    /**
     * Operation checkAvailabilityOfFundsAsync
     *
     * Confirmation of funds request
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  \BankIO\Sdk\Model\ConfirmationOfFunds $confirmation_of_funds Request body for a confirmation of funds request. (required)
     * @param  string $authorization This field  might be used in case where a consent was agreed between ASPSP and PSU through an OAuth2 based protocol,  facilitated by the TPP. (optional)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkAvailabilityOfFundsAsync($organisation, $x_request_id, $confirmation_of_funds, $authorization = null, $digest = null, $signature = null, $tpp_signature_certificate = null)
    {
        return $this->checkAvailabilityOfFundsAsyncWithHttpInfo($organisation, $x_request_id, $confirmation_of_funds, $authorization, $digest, $signature, $tpp_signature_certificate)
            ->then(
                function ($response) {
                    return $response[0];
                }
            );
    }

    /**
     * Operation checkAvailabilityOfFundsAsyncWithHttpInfo
     *
     * Confirmation of funds request
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  \BankIO\Sdk\Model\ConfirmationOfFunds $confirmation_of_funds Request body for a confirmation of funds request. (required)
     * @param  string $authorization This field  might be used in case where a consent was agreed between ASPSP and PSU through an OAuth2 based protocol,  facilitated by the TPP. (optional)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Promise\PromiseInterface
     */
    public function checkAvailabilityOfFundsAsyncWithHttpInfo($organisation, $x_request_id, $confirmation_of_funds, $authorization = null, $digest = null, $signature = null, $tpp_signature_certificate = null)
    {
        $returnType = '\BankIO\Sdk\Model\InlineResponse2003';
        $request = $this->checkAvailabilityOfFundsRequest($organisation, $x_request_id, $confirmation_of_funds, $authorization, $digest, $signature, $tpp_signature_certificate);

        return $this->client
            ->sendAsync($request, $this->createHttpClientOption())
            ->then(
                function ($response) use ($returnType) {
                    $responseBody = $response->getBody();
                    if ($returnType === '\SplFileObject') {
                        $content = $responseBody; //stream goes to serializer
                    } else {
                        $content = (string) $responseBody;
                    }

                    return [
                        ObjectSerializer::deserialize($content, $returnType, []),
                        $response->getStatusCode(),
                        $response->getHeaders()
                    ];
                },
                function ($exception) {
                    $response = $exception->getResponse();
                    $statusCode = $response->getStatusCode();
                    throw new ApiException(
                        sprintf(
                            '[%d] Error connecting to the API (%s)',
                            $statusCode,
                            $exception->getRequest()->getUri()
                        ),
                        $statusCode,
                        $response->getHeaders(),
                        $response->getBody()
                    );
                }
            );
    }

    /**
     * Create request for operation 'checkAvailabilityOfFunds'
     *
     * @param  string $organisation This identification is denoting the addressed bankIO organisation. The organisation is the \&quot;name\&quot; attribute of the organisation structure.  Its value is constant at least throughout the lifecycle of a given consent. (required)
     * @param  string $x_request_id ID of the request, unique to the call, as determined by the initiating party. (required)
     * @param  \BankIO\Sdk\Model\ConfirmationOfFunds $confirmation_of_funds Request body for a confirmation of funds request. (required)
     * @param  string $authorization This field  might be used in case where a consent was agreed between ASPSP and PSU through an OAuth2 based protocol,  facilitated by the TPP. (optional)
     * @param  string $digest Is contained if and only if the \&quot;Signature\&quot; element is contained in the header of the request. (optional)
     * @param  string $signature A signature of the request by the TPP on application level. This might be mandated by ASPSP. (optional)
     * @param  string $tpp_signature_certificate The certificate used for signing the request, in base64 encoding.  Must be contained if a signature is contained. (optional)
     *
     * @throws \InvalidArgumentException
     * @return \GuzzleHttp\Psr7\Request
     */
    protected function checkAvailabilityOfFundsRequest($organisation, $x_request_id, $confirmation_of_funds, $authorization = null, $digest = null, $signature = null, $tpp_signature_certificate = null)
    {
        // verify the required parameter 'organisation' is set
        if ($organisation === null || (is_array($organisation) && count($organisation) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $organisation when calling checkAvailabilityOfFunds'
            );
        }
        // verify the required parameter 'x_request_id' is set
        if ($x_request_id === null || (is_array($x_request_id) && count($x_request_id) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $x_request_id when calling checkAvailabilityOfFunds'
            );
        }
        // verify the required parameter 'confirmation_of_funds' is set
        if ($confirmation_of_funds === null || (is_array($confirmation_of_funds) && count($confirmation_of_funds) === 0)) {
            throw new \InvalidArgumentException(
                'Missing the required parameter $confirmation_of_funds when calling checkAvailabilityOfFunds'
            );
        }

        $resourcePath = '/api/org/{organisation}/v1/funds-confirmations';
        $formParams = [];
        $queryParams = [];
        $headerParams = [];
        $httpBody = '';
        $multipart = false;


        // header params
        if ($x_request_id !== null) {
            $headerParams['X-Request-ID'] = ObjectSerializer::toHeaderValue($x_request_id);
        }
        // header params
        if ($authorization !== null) {
            $headerParams['Authorization'] = ObjectSerializer::toHeaderValue($authorization);
        }
        // header params
        if ($digest !== null) {
            $headerParams['Digest'] = ObjectSerializer::toHeaderValue($digest);
        }
        // header params
        if ($signature !== null) {
            $headerParams['Signature'] = ObjectSerializer::toHeaderValue($signature);
        }
        // header params
        if ($tpp_signature_certificate !== null) {
            $headerParams['TPP-Signature-Certificate'] = ObjectSerializer::toHeaderValue($tpp_signature_certificate);
        }

        // path params
        if ($organisation !== null) {
            $resourcePath = str_replace(
                '{' . 'organisation' . '}',
                ObjectSerializer::toPathValue($organisation),
                $resourcePath
            );
        }

        // body params
        $_tempBody = null;
        if (isset($confirmation_of_funds)) {
            $_tempBody = $confirmation_of_funds;
        }

        if ($multipart) {
            $headers = $this->headerSelector->selectHeadersForMultipart(
                ['application/json', 'application/problem+json', ]
            );
        } else {
            $headers = $this->headerSelector->selectHeaders(
                ['application/json', 'application/problem+json', ],
                ['application/json']
            );
        }

        // for model (json/xml)
        if (isset($_tempBody)) {
            // $_tempBody is the method argument, if present
            if ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode(ObjectSerializer::sanitizeForSerialization($_tempBody));
            } else {
                $httpBody = $_tempBody;
            }
        } elseif (count($formParams) > 0) {
            if ($multipart) {
                $multipartContents = [];
                foreach ($formParams as $formParamName => $formParamValue) {
                    $multipartContents[] = [
                        'name' => $formParamName,
                        'contents' => $formParamValue
                    ];
                }
                // for HTTP post (form)
                $httpBody = new MultipartStream($multipartContents);

            } elseif ($headers['Content-Type'] === 'application/json') {
                $httpBody = \GuzzleHttp\json_encode($formParams);

            } else {
                // for HTTP post (form)
                $httpBody = \GuzzleHttp\Psr7\build_query($formParams);
            }
        }


        $defaultHeaders = [];
        if ($this->config->getUserAgent()) {
            $defaultHeaders['User-Agent'] = $this->config->getUserAgent();
        }

        $headers = array_merge(
            $defaultHeaders,
            $headerParams,
            $headers
        );

        $query = \GuzzleHttp\Psr7\build_query($queryParams);
        return new Request(
            'POST',
            $this->config->getHost() . $resourcePath . ($query ? "?{$query}" : ''),
            $headers,
            $httpBody
        );
    }

    /**
     * Create http client option
     *
     * @throws \RuntimeException on file opening failure
     * @return array of http client options
     */
    protected function createHttpClientOption()
    {
        $options = [];
        if ($this->config->getDebug()) {
            $options[RequestOptions::DEBUG] = fopen($this->config->getDebugFile(), 'a');
            if (!$options[RequestOptions::DEBUG]) {
                throw new \RuntimeException('Failed to open the debug file: ' . $this->config->getDebugFile());
            }
        }

        return $options;
    }
}
