<?php
/**
 * TransactionDetails
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  BankIO\Sdk
 * @author   bankIO
 * @link     https://bankio.co.uk/bankio-link/
 */

/**
 * bankIO NextGenPSD2 XS2A Framework
 *
 * # Summary The **NextGenPSD2** *Framework Version 1.3.6* (with errata) offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a PSD2 comlient API in addition to the elements defined in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API has to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space
 *
 * The version of the OpenAPI document: 1.3.6_2020-05-28
 * Contact: hello@bankio.co.uk
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BankIO\Sdk\Model;

use \ArrayAccess;
use \BankIO\Sdk\ObjectSerializer;

/**
 * TransactionDetails Class Doc Comment
 *
 * @category Class
 * @description Transaction details.
 * @package  BankIO\Sdk
 * @author   bankIO
 * @link     https://bankio.co.uk/bankio-link/
 */
class TransactionDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'transactionDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'transaction_id' => 'string',
        'entry_reference' => 'string',
        'end_to_end_id' => 'string',
        'mandate_id' => 'string',
        'check_id' => 'string',
        'creditor_id' => 'string',
        'booking_date' => '\DateTime',
        'value_date' => '\DateTime',
        'transaction_amount' => '\BankIO\Sdk\Model\Amount',
        'currency_exchange' => '\BankIO\Sdk\Model\ReportExchangeRate[]',
        'creditor_name' => 'string',
        'creditor_account' => '\BankIO\Sdk\Model\AccountReference',
        'creditor_agent' => 'string',
        'ultimate_creditor' => 'string',
        'debtor_name' => 'string',
        'debtor_account' => '\BankIO\Sdk\Model\AccountReference',
        'debtor_agent' => 'string',
        'ultimate_debtor' => 'string',
        'remittance_information_unstructured' => 'string',
        'remittance_information_unstructured_array' => 'string[]',
        'remittance_information_structured' => '\BankIO\Sdk\Model\RemittanceInformationStructured',
        'remittance_information_structured_array' => '\BankIO\Sdk\Model\RemittanceInformationStructured[]',
        'additional_information' => 'string',
        'additional_information_structured' => '\BankIO\Sdk\Model\AdditionalInformationStructured',
        'purpose_code' => '\BankIO\Sdk\Model\PurposeCode',
        'bank_transaction_code' => 'string',
        'proprietary_bank_transaction_code' => 'string',
        'balance_after_transaction' => '\BankIO\Sdk\Model\Balance',
        '_links' => '\BankIO\Sdk\Model\LinksTransactionDetails'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'transaction_id' => null,
        'entry_reference' => null,
        'end_to_end_id' => null,
        'mandate_id' => null,
        'check_id' => null,
        'creditor_id' => null,
        'booking_date' => 'date',
        'value_date' => 'date',
        'transaction_amount' => null,
        'currency_exchange' => null,
        'creditor_name' => null,
        'creditor_account' => null,
        'creditor_agent' => null,
        'ultimate_creditor' => null,
        'debtor_name' => null,
        'debtor_account' => null,
        'debtor_agent' => null,
        'ultimate_debtor' => null,
        'remittance_information_unstructured' => null,
        'remittance_information_unstructured_array' => null,
        'remittance_information_structured' => null,
        'remittance_information_structured_array' => null,
        'additional_information' => null,
        'additional_information_structured' => null,
        'purpose_code' => null,
        'bank_transaction_code' => null,
        'proprietary_bank_transaction_code' => null,
        'balance_after_transaction' => null,
        '_links' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'transaction_id' => 'transactionId',
        'entry_reference' => 'entryReference',
        'end_to_end_id' => 'endToEndId',
        'mandate_id' => 'mandateId',
        'check_id' => 'checkId',
        'creditor_id' => 'creditorId',
        'booking_date' => 'bookingDate',
        'value_date' => 'valueDate',
        'transaction_amount' => 'transactionAmount',
        'currency_exchange' => 'currencyExchange',
        'creditor_name' => 'creditorName',
        'creditor_account' => 'creditorAccount',
        'creditor_agent' => 'creditorAgent',
        'ultimate_creditor' => 'ultimateCreditor',
        'debtor_name' => 'debtorName',
        'debtor_account' => 'debtorAccount',
        'debtor_agent' => 'debtorAgent',
        'ultimate_debtor' => 'ultimateDebtor',
        'remittance_information_unstructured' => 'remittanceInformationUnstructured',
        'remittance_information_unstructured_array' => 'remittanceInformationUnstructuredArray',
        'remittance_information_structured' => 'remittanceInformationStructured',
        'remittance_information_structured_array' => 'remittanceInformationStructuredArray',
        'additional_information' => 'additionalInformation',
        'additional_information_structured' => 'additionalInformationStructured',
        'purpose_code' => 'purposeCode',
        'bank_transaction_code' => 'bankTransactionCode',
        'proprietary_bank_transaction_code' => 'proprietaryBankTransactionCode',
        'balance_after_transaction' => 'balanceAfterTransaction',
        '_links' => '_links'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'transaction_id' => 'setTransactionId',
        'entry_reference' => 'setEntryReference',
        'end_to_end_id' => 'setEndToEndId',
        'mandate_id' => 'setMandateId',
        'check_id' => 'setCheckId',
        'creditor_id' => 'setCreditorId',
        'booking_date' => 'setBookingDate',
        'value_date' => 'setValueDate',
        'transaction_amount' => 'setTransactionAmount',
        'currency_exchange' => 'setCurrencyExchange',
        'creditor_name' => 'setCreditorName',
        'creditor_account' => 'setCreditorAccount',
        'creditor_agent' => 'setCreditorAgent',
        'ultimate_creditor' => 'setUltimateCreditor',
        'debtor_name' => 'setDebtorName',
        'debtor_account' => 'setDebtorAccount',
        'debtor_agent' => 'setDebtorAgent',
        'ultimate_debtor' => 'setUltimateDebtor',
        'remittance_information_unstructured' => 'setRemittanceInformationUnstructured',
        'remittance_information_unstructured_array' => 'setRemittanceInformationUnstructuredArray',
        'remittance_information_structured' => 'setRemittanceInformationStructured',
        'remittance_information_structured_array' => 'setRemittanceInformationStructuredArray',
        'additional_information' => 'setAdditionalInformation',
        'additional_information_structured' => 'setAdditionalInformationStructured',
        'purpose_code' => 'setPurposeCode',
        'bank_transaction_code' => 'setBankTransactionCode',
        'proprietary_bank_transaction_code' => 'setProprietaryBankTransactionCode',
        'balance_after_transaction' => 'setBalanceAfterTransaction',
        '_links' => 'setLinks'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'transaction_id' => 'getTransactionId',
        'entry_reference' => 'getEntryReference',
        'end_to_end_id' => 'getEndToEndId',
        'mandate_id' => 'getMandateId',
        'check_id' => 'getCheckId',
        'creditor_id' => 'getCreditorId',
        'booking_date' => 'getBookingDate',
        'value_date' => 'getValueDate',
        'transaction_amount' => 'getTransactionAmount',
        'currency_exchange' => 'getCurrencyExchange',
        'creditor_name' => 'getCreditorName',
        'creditor_account' => 'getCreditorAccount',
        'creditor_agent' => 'getCreditorAgent',
        'ultimate_creditor' => 'getUltimateCreditor',
        'debtor_name' => 'getDebtorName',
        'debtor_account' => 'getDebtorAccount',
        'debtor_agent' => 'getDebtorAgent',
        'ultimate_debtor' => 'getUltimateDebtor',
        'remittance_information_unstructured' => 'getRemittanceInformationUnstructured',
        'remittance_information_unstructured_array' => 'getRemittanceInformationUnstructuredArray',
        'remittance_information_structured' => 'getRemittanceInformationStructured',
        'remittance_information_structured_array' => 'getRemittanceInformationStructuredArray',
        'additional_information' => 'getAdditionalInformation',
        'additional_information_structured' => 'getAdditionalInformationStructured',
        'purpose_code' => 'getPurposeCode',
        'bank_transaction_code' => 'getBankTransactionCode',
        'proprietary_bank_transaction_code' => 'getProprietaryBankTransactionCode',
        'balance_after_transaction' => 'getBalanceAfterTransaction',
        '_links' => 'getLinks'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['transaction_id'] = isset($data['transaction_id']) ? $data['transaction_id'] : null;
        $this->container['entry_reference'] = isset($data['entry_reference']) ? $data['entry_reference'] : null;
        $this->container['end_to_end_id'] = isset($data['end_to_end_id']) ? $data['end_to_end_id'] : null;
        $this->container['mandate_id'] = isset($data['mandate_id']) ? $data['mandate_id'] : null;
        $this->container['check_id'] = isset($data['check_id']) ? $data['check_id'] : null;
        $this->container['creditor_id'] = isset($data['creditor_id']) ? $data['creditor_id'] : null;
        $this->container['booking_date'] = isset($data['booking_date']) ? $data['booking_date'] : null;
        $this->container['value_date'] = isset($data['value_date']) ? $data['value_date'] : null;
        $this->container['transaction_amount'] = isset($data['transaction_amount']) ? $data['transaction_amount'] : null;
        $this->container['currency_exchange'] = isset($data['currency_exchange']) ? $data['currency_exchange'] : null;
        $this->container['creditor_name'] = isset($data['creditor_name']) ? $data['creditor_name'] : null;
        $this->container['creditor_account'] = isset($data['creditor_account']) ? $data['creditor_account'] : null;
        $this->container['creditor_agent'] = isset($data['creditor_agent']) ? $data['creditor_agent'] : null;
        $this->container['ultimate_creditor'] = isset($data['ultimate_creditor']) ? $data['ultimate_creditor'] : null;
        $this->container['debtor_name'] = isset($data['debtor_name']) ? $data['debtor_name'] : null;
        $this->container['debtor_account'] = isset($data['debtor_account']) ? $data['debtor_account'] : null;
        $this->container['debtor_agent'] = isset($data['debtor_agent']) ? $data['debtor_agent'] : null;
        $this->container['ultimate_debtor'] = isset($data['ultimate_debtor']) ? $data['ultimate_debtor'] : null;
        $this->container['remittance_information_unstructured'] = isset($data['remittance_information_unstructured']) ? $data['remittance_information_unstructured'] : null;
        $this->container['remittance_information_unstructured_array'] = isset($data['remittance_information_unstructured_array']) ? $data['remittance_information_unstructured_array'] : null;
        $this->container['remittance_information_structured'] = isset($data['remittance_information_structured']) ? $data['remittance_information_structured'] : null;
        $this->container['remittance_information_structured_array'] = isset($data['remittance_information_structured_array']) ? $data['remittance_information_structured_array'] : null;
        $this->container['additional_information'] = isset($data['additional_information']) ? $data['additional_information'] : null;
        $this->container['additional_information_structured'] = isset($data['additional_information_structured']) ? $data['additional_information_structured'] : null;
        $this->container['purpose_code'] = isset($data['purpose_code']) ? $data['purpose_code'] : null;
        $this->container['bank_transaction_code'] = isset($data['bank_transaction_code']) ? $data['bank_transaction_code'] : null;
        $this->container['proprietary_bank_transaction_code'] = isset($data['proprietary_bank_transaction_code']) ? $data['proprietary_bank_transaction_code'] : null;
        $this->container['balance_after_transaction'] = isset($data['balance_after_transaction']) ? $data['balance_after_transaction'] : null;
        $this->container['_links'] = isset($data['_links']) ? $data['_links'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['entry_reference']) && (mb_strlen($this->container['entry_reference']) > 35)) {
            $invalidProperties[] = "invalid value for 'entry_reference', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['end_to_end_id']) && (mb_strlen($this->container['end_to_end_id']) > 35)) {
            $invalidProperties[] = "invalid value for 'end_to_end_id', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['mandate_id']) && (mb_strlen($this->container['mandate_id']) > 35)) {
            $invalidProperties[] = "invalid value for 'mandate_id', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['check_id']) && (mb_strlen($this->container['check_id']) > 35)) {
            $invalidProperties[] = "invalid value for 'check_id', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['creditor_id']) && (mb_strlen($this->container['creditor_id']) > 35)) {
            $invalidProperties[] = "invalid value for 'creditor_id', the character length must be smaller than or equal to 35.";
        }

        if ($this->container['transaction_amount'] === null) {
            $invalidProperties[] = "'transaction_amount' can't be null";
        }
        if (!is_null($this->container['creditor_name']) && (mb_strlen($this->container['creditor_name']) > 70)) {
            $invalidProperties[] = "invalid value for 'creditor_name', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['creditor_agent']) && !preg_match("/[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/", $this->container['creditor_agent'])) {
            $invalidProperties[] = "invalid value for 'creditor_agent', must be conform to the pattern /[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/.";
        }

        if (!is_null($this->container['ultimate_creditor']) && (mb_strlen($this->container['ultimate_creditor']) > 70)) {
            $invalidProperties[] = "invalid value for 'ultimate_creditor', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['debtor_name']) && (mb_strlen($this->container['debtor_name']) > 70)) {
            $invalidProperties[] = "invalid value for 'debtor_name', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['debtor_agent']) && !preg_match("/[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/", $this->container['debtor_agent'])) {
            $invalidProperties[] = "invalid value for 'debtor_agent', must be conform to the pattern /[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/.";
        }

        if (!is_null($this->container['ultimate_debtor']) && (mb_strlen($this->container['ultimate_debtor']) > 70)) {
            $invalidProperties[] = "invalid value for 'ultimate_debtor', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['remittance_information_unstructured']) && (mb_strlen($this->container['remittance_information_unstructured']) > 140)) {
            $invalidProperties[] = "invalid value for 'remittance_information_unstructured', the character length must be smaller than or equal to 140.";
        }

        if (!is_null($this->container['additional_information']) && (mb_strlen($this->container['additional_information']) > 500)) {
            $invalidProperties[] = "invalid value for 'additional_information', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['proprietary_bank_transaction_code']) && (mb_strlen($this->container['proprietary_bank_transaction_code']) > 35)) {
            $invalidProperties[] = "invalid value for 'proprietary_bank_transaction_code', the character length must be smaller than or equal to 35.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets transaction_id
     *
     * @return string|null
     */
    public function getTransactionId()
    {
        return $this->container['transaction_id'];
    }

    /**
     * Sets transaction_id
     *
     * @param string|null $transaction_id This identification is given by the attribute transactionId of the corresponding entry of a transaction list.
     *
     * @return $this
     */
    public function setTransactionId($transaction_id)
    {
        $this->container['transaction_id'] = $transaction_id;

        return $this;
    }

    /**
     * Gets entry_reference
     *
     * @return string|null
     */
    public function getEntryReference()
    {
        return $this->container['entry_reference'];
    }

    /**
     * Sets entry_reference
     *
     * @param string|null $entry_reference Is the identification of the transaction as used e.g. for reference for deltafunction on application level. The same identification as for example used within camt.05x messages.
     *
     * @return $this
     */
    public function setEntryReference($entry_reference)
    {
        if (!is_null($entry_reference) && (mb_strlen($entry_reference) > 35)) {
            throw new \InvalidArgumentException('invalid length for $entry_reference when calling TransactionDetails., must be smaller than or equal to 35.');
        }

        $this->container['entry_reference'] = $entry_reference;

        return $this;
    }

    /**
     * Gets end_to_end_id
     *
     * @return string|null
     */
    public function getEndToEndId()
    {
        return $this->container['end_to_end_id'];
    }

    /**
     * Sets end_to_end_id
     *
     * @param string|null $end_to_end_id Unique end to end identity.
     *
     * @return $this
     */
    public function setEndToEndId($end_to_end_id)
    {
        if (!is_null($end_to_end_id) && (mb_strlen($end_to_end_id) > 35)) {
            throw new \InvalidArgumentException('invalid length for $end_to_end_id when calling TransactionDetails., must be smaller than or equal to 35.');
        }

        $this->container['end_to_end_id'] = $end_to_end_id;

        return $this;
    }

    /**
     * Gets mandate_id
     *
     * @return string|null
     */
    public function getMandateId()
    {
        return $this->container['mandate_id'];
    }

    /**
     * Sets mandate_id
     *
     * @param string|null $mandate_id Identification of Mandates, e.g. a SEPA Mandate ID.
     *
     * @return $this
     */
    public function setMandateId($mandate_id)
    {
        if (!is_null($mandate_id) && (mb_strlen($mandate_id) > 35)) {
            throw new \InvalidArgumentException('invalid length for $mandate_id when calling TransactionDetails., must be smaller than or equal to 35.');
        }

        $this->container['mandate_id'] = $mandate_id;

        return $this;
    }

    /**
     * Gets check_id
     *
     * @return string|null
     */
    public function getCheckId()
    {
        return $this->container['check_id'];
    }

    /**
     * Sets check_id
     *
     * @param string|null $check_id Identification of a Cheque.
     *
     * @return $this
     */
    public function setCheckId($check_id)
    {
        if (!is_null($check_id) && (mb_strlen($check_id) > 35)) {
            throw new \InvalidArgumentException('invalid length for $check_id when calling TransactionDetails., must be smaller than or equal to 35.');
        }

        $this->container['check_id'] = $check_id;

        return $this;
    }

    /**
     * Gets creditor_id
     *
     * @return string|null
     */
    public function getCreditorId()
    {
        return $this->container['creditor_id'];
    }

    /**
     * Sets creditor_id
     *
     * @param string|null $creditor_id Identification of Creditors, e.g. a SEPA Creditor ID.
     *
     * @return $this
     */
    public function setCreditorId($creditor_id)
    {
        if (!is_null($creditor_id) && (mb_strlen($creditor_id) > 35)) {
            throw new \InvalidArgumentException('invalid length for $creditor_id when calling TransactionDetails., must be smaller than or equal to 35.');
        }

        $this->container['creditor_id'] = $creditor_id;

        return $this;
    }

    /**
     * Gets booking_date
     *
     * @return \DateTime|null
     */
    public function getBookingDate()
    {
        return $this->container['booking_date'];
    }

    /**
     * Sets booking_date
     *
     * @param \DateTime|null $booking_date The date when an entry is posted to an account on the ASPSPs books.
     *
     * @return $this
     */
    public function setBookingDate($booking_date)
    {
        $this->container['booking_date'] = $booking_date;

        return $this;
    }

    /**
     * Gets value_date
     *
     * @return \DateTime|null
     */
    public function getValueDate()
    {
        return $this->container['value_date'];
    }

    /**
     * Sets value_date
     *
     * @param \DateTime|null $value_date The Date at which assets become available to the account owner in case of a credit.
     *
     * @return $this
     */
    public function setValueDate($value_date)
    {
        $this->container['value_date'] = $value_date;

        return $this;
    }

    /**
     * Gets transaction_amount
     *
     * @return \BankIO\Sdk\Model\Amount
     */
    public function getTransactionAmount()
    {
        return $this->container['transaction_amount'];
    }

    /**
     * Sets transaction_amount
     *
     * @param \BankIO\Sdk\Model\Amount $transaction_amount transaction_amount
     *
     * @return $this
     */
    public function setTransactionAmount($transaction_amount)
    {
        $this->container['transaction_amount'] = $transaction_amount;

        return $this;
    }

    /**
     * Gets currency_exchange
     *
     * @return \BankIO\Sdk\Model\ReportExchangeRate[]|null
     */
    public function getCurrencyExchange()
    {
        return $this->container['currency_exchange'];
    }

    /**
     * Sets currency_exchange
     *
     * @param \BankIO\Sdk\Model\ReportExchangeRate[]|null $currency_exchange Array of exchange rates.
     *
     * @return $this
     */
    public function setCurrencyExchange($currency_exchange)
    {
        $this->container['currency_exchange'] = $currency_exchange;

        return $this;
    }

    /**
     * Gets creditor_name
     *
     * @return string|null
     */
    public function getCreditorName()
    {
        return $this->container['creditor_name'];
    }

    /**
     * Sets creditor_name
     *
     * @param string|null $creditor_name Creditor name.
     *
     * @return $this
     */
    public function setCreditorName($creditor_name)
    {
        if (!is_null($creditor_name) && (mb_strlen($creditor_name) > 70)) {
            throw new \InvalidArgumentException('invalid length for $creditor_name when calling TransactionDetails., must be smaller than or equal to 70.');
        }

        $this->container['creditor_name'] = $creditor_name;

        return $this;
    }

    /**
     * Gets creditor_account
     *
     * @return \BankIO\Sdk\Model\AccountReference|null
     */
    public function getCreditorAccount()
    {
        return $this->container['creditor_account'];
    }

    /**
     * Sets creditor_account
     *
     * @param \BankIO\Sdk\Model\AccountReference|null $creditor_account creditor_account
     *
     * @return $this
     */
    public function setCreditorAccount($creditor_account)
    {
        $this->container['creditor_account'] = $creditor_account;

        return $this;
    }

    /**
     * Gets creditor_agent
     *
     * @return string|null
     */
    public function getCreditorAgent()
    {
        return $this->container['creditor_agent'];
    }

    /**
     * Sets creditor_agent
     *
     * @param string|null $creditor_agent BICFI
     *
     * @return $this
     */
    public function setCreditorAgent($creditor_agent)
    {

        if (!is_null($creditor_agent) && (!preg_match("/[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/", $creditor_agent))) {
            throw new \InvalidArgumentException("invalid value for $creditor_agent when calling TransactionDetails., must conform to the pattern /[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/.");
        }

        $this->container['creditor_agent'] = $creditor_agent;

        return $this;
    }

    /**
     * Gets ultimate_creditor
     *
     * @return string|null
     */
    public function getUltimateCreditor()
    {
        return $this->container['ultimate_creditor'];
    }

    /**
     * Sets ultimate_creditor
     *
     * @param string|null $ultimate_creditor Ultimate creditor.
     *
     * @return $this
     */
    public function setUltimateCreditor($ultimate_creditor)
    {
        if (!is_null($ultimate_creditor) && (mb_strlen($ultimate_creditor) > 70)) {
            throw new \InvalidArgumentException('invalid length for $ultimate_creditor when calling TransactionDetails., must be smaller than or equal to 70.');
        }

        $this->container['ultimate_creditor'] = $ultimate_creditor;

        return $this;
    }

    /**
     * Gets debtor_name
     *
     * @return string|null
     */
    public function getDebtorName()
    {
        return $this->container['debtor_name'];
    }

    /**
     * Sets debtor_name
     *
     * @param string|null $debtor_name Debtor name.
     *
     * @return $this
     */
    public function setDebtorName($debtor_name)
    {
        if (!is_null($debtor_name) && (mb_strlen($debtor_name) > 70)) {
            throw new \InvalidArgumentException('invalid length for $debtor_name when calling TransactionDetails., must be smaller than or equal to 70.');
        }

        $this->container['debtor_name'] = $debtor_name;

        return $this;
    }

    /**
     * Gets debtor_account
     *
     * @return \BankIO\Sdk\Model\AccountReference|null
     */
    public function getDebtorAccount()
    {
        return $this->container['debtor_account'];
    }

    /**
     * Sets debtor_account
     *
     * @param \BankIO\Sdk\Model\AccountReference|null $debtor_account debtor_account
     *
     * @return $this
     */
    public function setDebtorAccount($debtor_account)
    {
        $this->container['debtor_account'] = $debtor_account;

        return $this;
    }

    /**
     * Gets debtor_agent
     *
     * @return string|null
     */
    public function getDebtorAgent()
    {
        return $this->container['debtor_agent'];
    }

    /**
     * Sets debtor_agent
     *
     * @param string|null $debtor_agent BICFI
     *
     * @return $this
     */
    public function setDebtorAgent($debtor_agent)
    {

        if (!is_null($debtor_agent) && (!preg_match("/[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/", $debtor_agent))) {
            throw new \InvalidArgumentException("invalid value for $debtor_agent when calling TransactionDetails., must conform to the pattern /[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/.");
        }

        $this->container['debtor_agent'] = $debtor_agent;

        return $this;
    }

    /**
     * Gets ultimate_debtor
     *
     * @return string|null
     */
    public function getUltimateDebtor()
    {
        return $this->container['ultimate_debtor'];
    }

    /**
     * Sets ultimate_debtor
     *
     * @param string|null $ultimate_debtor Ultimate debtor.
     *
     * @return $this
     */
    public function setUltimateDebtor($ultimate_debtor)
    {
        if (!is_null($ultimate_debtor) && (mb_strlen($ultimate_debtor) > 70)) {
            throw new \InvalidArgumentException('invalid length for $ultimate_debtor when calling TransactionDetails., must be smaller than or equal to 70.');
        }

        $this->container['ultimate_debtor'] = $ultimate_debtor;

        return $this;
    }

    /**
     * Gets remittance_information_unstructured
     *
     * @return string|null
     */
    public function getRemittanceInformationUnstructured()
    {
        return $this->container['remittance_information_unstructured'];
    }

    /**
     * Sets remittance_information_unstructured
     *
     * @param string|null $remittance_information_unstructured Unstructured remittance information.
     *
     * @return $this
     */
    public function setRemittanceInformationUnstructured($remittance_information_unstructured)
    {
        if (!is_null($remittance_information_unstructured) && (mb_strlen($remittance_information_unstructured) > 140)) {
            throw new \InvalidArgumentException('invalid length for $remittance_information_unstructured when calling TransactionDetails., must be smaller than or equal to 140.');
        }

        $this->container['remittance_information_unstructured'] = $remittance_information_unstructured;

        return $this;
    }

    /**
     * Gets remittance_information_unstructured_array
     *
     * @return string[]|null
     */
    public function getRemittanceInformationUnstructuredArray()
    {
        return $this->container['remittance_information_unstructured_array'];
    }

    /**
     * Sets remittance_information_unstructured_array
     *
     * @param string[]|null $remittance_information_unstructured_array Array of unstructured remittance information.
     *
     * @return $this
     */
    public function setRemittanceInformationUnstructuredArray($remittance_information_unstructured_array)
    {
        $this->container['remittance_information_unstructured_array'] = $remittance_information_unstructured_array;

        return $this;
    }

    /**
     * Gets remittance_information_structured
     *
     * @return \BankIO\Sdk\Model\RemittanceInformationStructured|null
     */
    public function getRemittanceInformationStructured()
    {
        return $this->container['remittance_information_structured'];
    }

    /**
     * Sets remittance_information_structured
     *
     * @param \BankIO\Sdk\Model\RemittanceInformationStructured|null $remittance_information_structured remittance_information_structured
     *
     * @return $this
     */
    public function setRemittanceInformationStructured($remittance_information_structured)
    {
        $this->container['remittance_information_structured'] = $remittance_information_structured;

        return $this;
    }

    /**
     * Gets remittance_information_structured_array
     *
     * @return \BankIO\Sdk\Model\RemittanceInformationStructured[]|null
     */
    public function getRemittanceInformationStructuredArray()
    {
        return $this->container['remittance_information_structured_array'];
    }

    /**
     * Sets remittance_information_structured_array
     *
     * @param \BankIO\Sdk\Model\RemittanceInformationStructured[]|null $remittance_information_structured_array Array of structured remittance information.
     *
     * @return $this
     */
    public function setRemittanceInformationStructuredArray($remittance_information_structured_array)
    {
        $this->container['remittance_information_structured_array'] = $remittance_information_structured_array;

        return $this;
    }

    /**
     * Gets additional_information
     *
     * @return string|null
     */
    public function getAdditionalInformation()
    {
        return $this->container['additional_information'];
    }

    /**
     * Sets additional_information
     *
     * @param string|null $additional_information Might be used by the ASPSP to transport additional transaction related information to the PSU
     *
     * @return $this
     */
    public function setAdditionalInformation($additional_information)
    {
        if (!is_null($additional_information) && (mb_strlen($additional_information) > 500)) {
            throw new \InvalidArgumentException('invalid length for $additional_information when calling TransactionDetails., must be smaller than or equal to 500.');
        }

        $this->container['additional_information'] = $additional_information;

        return $this;
    }

    /**
     * Gets additional_information_structured
     *
     * @return \BankIO\Sdk\Model\AdditionalInformationStructured|null
     */
    public function getAdditionalInformationStructured()
    {
        return $this->container['additional_information_structured'];
    }

    /**
     * Sets additional_information_structured
     *
     * @param \BankIO\Sdk\Model\AdditionalInformationStructured|null $additional_information_structured additional_information_structured
     *
     * @return $this
     */
    public function setAdditionalInformationStructured($additional_information_structured)
    {
        $this->container['additional_information_structured'] = $additional_information_structured;

        return $this;
    }

    /**
     * Gets purpose_code
     *
     * @return \BankIO\Sdk\Model\PurposeCode|null
     */
    public function getPurposeCode()
    {
        return $this->container['purpose_code'];
    }

    /**
     * Sets purpose_code
     *
     * @param \BankIO\Sdk\Model\PurposeCode|null $purpose_code purpose_code
     *
     * @return $this
     */
    public function setPurposeCode($purpose_code)
    {
        $this->container['purpose_code'] = $purpose_code;

        return $this;
    }

    /**
     * Gets bank_transaction_code
     *
     * @return string|null
     */
    public function getBankTransactionCode()
    {
        return $this->container['bank_transaction_code'];
    }

    /**
     * Sets bank_transaction_code
     *
     * @param string|null $bank_transaction_code Bank transaction code as used by the ASPSP and using the sub elements of this structured code defined by ISO 20022.   This code type is concatenating the three ISO20022 Codes    * Domain Code,    * Family Code, and    * SubFamiliy Code  by hyphens, resulting in 'DomainCode'-'FamilyCode'-'SubFamilyCode'. For standing order reports the following codes are applicable:   * \"PMNT-ICDT-STDO\" for credit transfers,   * \"PMNT-IRCT-STDO\"  for instant credit transfers   * \"PMNT-ICDT-XBST\" for cross-border credit transfers   * \"PMNT-IRCT-XBST\" for cross-border real time credit transfers and   * \"PMNT-MCOP-OTHR\" for specific standing orders which have a dynamical amount to move left funds e.g. on month end to a saving account
     *
     * @return $this
     */
    public function setBankTransactionCode($bank_transaction_code)
    {
        $this->container['bank_transaction_code'] = $bank_transaction_code;

        return $this;
    }

    /**
     * Gets proprietary_bank_transaction_code
     *
     * @return string|null
     */
    public function getProprietaryBankTransactionCode()
    {
        return $this->container['proprietary_bank_transaction_code'];
    }

    /**
     * Sets proprietary_bank_transaction_code
     *
     * @param string|null $proprietary_bank_transaction_code Proprietary bank transaction code as used within a community or within an ASPSP e.g.  for MT94x based transaction reports.
     *
     * @return $this
     */
    public function setProprietaryBankTransactionCode($proprietary_bank_transaction_code)
    {
        if (!is_null($proprietary_bank_transaction_code) && (mb_strlen($proprietary_bank_transaction_code) > 35)) {
            throw new \InvalidArgumentException('invalid length for $proprietary_bank_transaction_code when calling TransactionDetails., must be smaller than or equal to 35.');
        }

        $this->container['proprietary_bank_transaction_code'] = $proprietary_bank_transaction_code;

        return $this;
    }

    /**
     * Gets balance_after_transaction
     *
     * @return \BankIO\Sdk\Model\Balance|null
     */
    public function getBalanceAfterTransaction()
    {
        return $this->container['balance_after_transaction'];
    }

    /**
     * Sets balance_after_transaction
     *
     * @param \BankIO\Sdk\Model\Balance|null $balance_after_transaction balance_after_transaction
     *
     * @return $this
     */
    public function setBalanceAfterTransaction($balance_after_transaction)
    {
        $this->container['balance_after_transaction'] = $balance_after_transaction;

        return $this;
    }

    /**
     * Gets _links
     *
     * @return \BankIO\Sdk\Model\LinksTransactionDetails|null
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     *
     * @param \BankIO\Sdk\Model\LinksTransactionDetails|null $_links _links
     *
     * @return $this
     */
    public function setLinks($_links)
    {
        $this->container['_links'] = $_links;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


