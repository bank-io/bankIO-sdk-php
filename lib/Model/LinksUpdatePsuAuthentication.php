<?php
/**
 * LinksUpdatePsuAuthentication
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  BankIO\Sdk
 * @author   bankIO
 * @link     https://bankio.co.uk/bankio-link/
 */

/**
 * bankIO NextGenPSD2 XS2A Framework
 *
 * # Summary The **NextGenPSD2** *Framework Version 1.3.6* (with errata) offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a PSD2 comlient API in addition to the elements defined in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API has to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space
 *
 * The version of the OpenAPI document: 1.3.6_2020-05-28
 * Contact: info@berlin-group.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BankIO\Sdk\Model;

use \ArrayAccess;
use \BankIO\Sdk\ObjectSerializer;

/**
 * LinksUpdatePsuAuthentication Class Doc Comment
 *
 * @category Class
 * @description A list of hyperlinks to be recognised by the TPP. Might be contained, if several authentication methods  are available for the PSU. Type of links admitted in this response:   * &#39;updateAdditionalPsuAuthentication&#39;:     The link to the payment initiation or account information resource,      which needs to be updated by an additional PSU password.      This link is only contained in rare cases,      where such additional passwords are needed for PSU authentications.   * &#39;updateAdditionalEncryptedPsuAuthentication&#39;:      The link to the payment initiation or account information resource,      which needs to be updated by an additional encrypted PSU password.      This link is only contained in rare cases, where such additional passwords are needed for PSU authentications.   * &#39;selectAuthenticationMethod&#39;:      This is a link to a resource, where the TPP can select the applicable second factor authentication      methods for the PSU, if there were several available authentication methods.      This link is only contained, if the PSU is already identified or authenticated with the first relevant      factor or alternatively an access token, if SCA is required and if the PSU has a choice between different      authentication methods.      If this link is contained, then there is also the data element &#39;scaMethods&#39; contained in the response body.   * &#39;authoriseTransaction&#39;:      The link to the resource, where the \&quot;Transaction authorisation request\&quot; is sent to.      This is the link to the resource which will authorise the transaction by checking the SCA authentication      data within the Embedded SCA approach.   * &#39;scaStatus&#39;:      The link to retrieve the scaStatus of the corresponding authorisation sub-resource.
 * @package  BankIO\Sdk
 * @author   bankIO
 * @link     https://bankio.co.uk/bankio-link/
 */
class LinksUpdatePsuAuthentication implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = '_linksUpdatePsuAuthentication';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'update_additional_psu_authentication' => '\BankIO\Sdk\Model\HrefType',
        'update_additional_encrypted_psu_authentication' => '\BankIO\Sdk\Model\HrefType',
        'select_authentication_method' => '\BankIO\Sdk\Model\HrefType',
        'authorise_transaction' => '\BankIO\Sdk\Model\HrefType',
        'sca_status' => '\BankIO\Sdk\Model\HrefType'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'update_additional_psu_authentication' => null,
        'update_additional_encrypted_psu_authentication' => null,
        'select_authentication_method' => null,
        'authorise_transaction' => null,
        'sca_status' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'update_additional_psu_authentication' => 'updateAdditionalPsuAuthentication',
        'update_additional_encrypted_psu_authentication' => 'updateAdditionalEncryptedPsuAuthentication',
        'select_authentication_method' => 'selectAuthenticationMethod',
        'authorise_transaction' => 'authoriseTransaction',
        'sca_status' => 'scaStatus'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'update_additional_psu_authentication' => 'setUpdateAdditionalPsuAuthentication',
        'update_additional_encrypted_psu_authentication' => 'setUpdateAdditionalEncryptedPsuAuthentication',
        'select_authentication_method' => 'setSelectAuthenticationMethod',
        'authorise_transaction' => 'setAuthoriseTransaction',
        'sca_status' => 'setScaStatus'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'update_additional_psu_authentication' => 'getUpdateAdditionalPsuAuthentication',
        'update_additional_encrypted_psu_authentication' => 'getUpdateAdditionalEncryptedPsuAuthentication',
        'select_authentication_method' => 'getSelectAuthenticationMethod',
        'authorise_transaction' => 'getAuthoriseTransaction',
        'sca_status' => 'getScaStatus'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['update_additional_psu_authentication'] = isset($data['update_additional_psu_authentication']) ? $data['update_additional_psu_authentication'] : null;
        $this->container['update_additional_encrypted_psu_authentication'] = isset($data['update_additional_encrypted_psu_authentication']) ? $data['update_additional_encrypted_psu_authentication'] : null;
        $this->container['select_authentication_method'] = isset($data['select_authentication_method']) ? $data['select_authentication_method'] : null;
        $this->container['authorise_transaction'] = isset($data['authorise_transaction']) ? $data['authorise_transaction'] : null;
        $this->container['sca_status'] = isset($data['sca_status']) ? $data['sca_status'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = parent::listInvalidProperties();

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets update_additional_psu_authentication
     *
     * @return \BankIO\Sdk\Model\HrefType|null
     */
    public function getUpdateAdditionalPsuAuthentication()
    {
        return $this->container['update_additional_psu_authentication'];
    }

    /**
     * Sets update_additional_psu_authentication
     *
     * @param \BankIO\Sdk\Model\HrefType|null $update_additional_psu_authentication update_additional_psu_authentication
     *
     * @return $this
     */
    public function setUpdateAdditionalPsuAuthentication($update_additional_psu_authentication)
    {
        $this->container['update_additional_psu_authentication'] = $update_additional_psu_authentication;

        return $this;
    }

    /**
     * Gets update_additional_encrypted_psu_authentication
     *
     * @return \BankIO\Sdk\Model\HrefType|null
     */
    public function getUpdateAdditionalEncryptedPsuAuthentication()
    {
        return $this->container['update_additional_encrypted_psu_authentication'];
    }

    /**
     * Sets update_additional_encrypted_psu_authentication
     *
     * @param \BankIO\Sdk\Model\HrefType|null $update_additional_encrypted_psu_authentication update_additional_encrypted_psu_authentication
     *
     * @return $this
     */
    public function setUpdateAdditionalEncryptedPsuAuthentication($update_additional_encrypted_psu_authentication)
    {
        $this->container['update_additional_encrypted_psu_authentication'] = $update_additional_encrypted_psu_authentication;

        return $this;
    }

    /**
     * Gets select_authentication_method
     *
     * @return \BankIO\Sdk\Model\HrefType|null
     */
    public function getSelectAuthenticationMethod()
    {
        return $this->container['select_authentication_method'];
    }

    /**
     * Sets select_authentication_method
     *
     * @param \BankIO\Sdk\Model\HrefType|null $select_authentication_method select_authentication_method
     *
     * @return $this
     */
    public function setSelectAuthenticationMethod($select_authentication_method)
    {
        $this->container['select_authentication_method'] = $select_authentication_method;

        return $this;
    }

    /**
     * Gets authorise_transaction
     *
     * @return \BankIO\Sdk\Model\HrefType|null
     */
    public function getAuthoriseTransaction()
    {
        return $this->container['authorise_transaction'];
    }

    /**
     * Sets authorise_transaction
     *
     * @param \BankIO\Sdk\Model\HrefType|null $authorise_transaction authorise_transaction
     *
     * @return $this
     */
    public function setAuthoriseTransaction($authorise_transaction)
    {
        $this->container['authorise_transaction'] = $authorise_transaction;

        return $this;
    }

    /**
     * Gets sca_status
     *
     * @return \BankIO\Sdk\Model\HrefType|null
     */
    public function getScaStatus()
    {
        return $this->container['sca_status'];
    }

    /**
     * Sets sca_status
     *
     * @param \BankIO\Sdk\Model\HrefType|null $sca_status sca_status
     *
     * @return $this
     */
    public function setScaStatus($sca_status)
    {
        $this->container['sca_status'] = $sca_status;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


