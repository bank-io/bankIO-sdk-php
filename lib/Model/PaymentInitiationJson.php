<?php
/**
 * PaymentInitiationJson
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  BankIO\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * bankIO NextGenPSD2 XS2A Framework
 *
 * # Summary The **NextGenPSD2** *Framework Version 1.3.6* (with errata) offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a PSD2 comlient API in addition to the elements defined in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API has to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space
 *
 * The version of the OpenAPI document: 1.3.6_2020-05-28
 * Contact: info@berlin-group.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BankIO\Sdk\Model;

use \ArrayAccess;
use \BankIO\Sdk\ObjectSerializer;

/**
 * PaymentInitiationJson Class Doc Comment
 *
 * @category Class
 * @description Generic Body for a payment initation via JSON.  This generic JSON body can be used to represent valid payment initiations for the following JSON based payment product,  which where defined in the Implementation Guidelines:    * sepa-credit-transfers   * instant-sepa-credit-transfers   * target-2-payments   * cross-border-credit-transfers  For the convenience of the implementer additional which are already predefinded in the Implementation Guidelines  are included (but commented in source code), such that an ASPSP may add them easily.  Take care: Since the format is intended to fit for all payment products  there are additional conditions which are NOT covered by this specification. Please check the Implementation Guidelines for detailes.   The following data element are depending on the actual payment product available (in source code):             &lt;table style&#x3D;\&quot;width:100%\&quot;&gt;  &lt;tr&gt;&lt;th&gt;Data Element&lt;/th&gt;&lt;th&gt;SCT EU Core&lt;/th&gt;&lt;th&gt;SCT INST EU Core&lt;/th&gt;&lt;th&gt;Target2 Paym. Core&lt;/th&gt;&lt;th&gt;Cross Border CT Core&lt;/th&gt;&lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;endToEndIdentification&lt;/td&gt;&lt;td&gt; optional&lt;/td&gt; &lt;td&gt;optional&lt;/td&gt; &lt;td&gt;optional&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;instructionIdentification&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;debtorName&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;debtorAccount&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;debtorId&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;ultimateDebtor&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;instructedAmount&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;transactionCurrency&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;exchangeRateInformation&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt;&lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;creditorAccount&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;creditorAgent&lt;/td&gt; &lt;td&gt;optional&lt;/td&gt; &lt;td&gt;optional&lt;/td&gt; &lt;td&gt;optional&lt;/td&gt; &lt;td&gt;conditional &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;creditorAgentName&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;creditorName&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;td&gt;mandatory&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;creditorId&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;creditorAddress&lt;/td&gt;optional&lt;/td&gt; &lt;td&gt;optional&lt;/td&gt; &lt;td&gt;optional&lt;/td&gt; &lt;td&gt;conditional &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;creditorNameAndAddress&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;ultimateCreditor&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;purposeCode&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;chargeBearer&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;optional&lt;/td&gt; &lt;td&gt;conditional &lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;remittanceInformationUnstructured&lt;/td&gt; &lt;td&gt;optional&lt;/td&gt; &lt;td&gt;optional&lt;/td&gt; &lt;td&gt; optional&lt;/td&gt; &lt;td&gt;optional&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;remittanceInformationUnstructuredArray&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;remittanceInformationStructured&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;remittanceInformationStructuredArray&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;requestedExecutionDate&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;  &lt;tr&gt;&lt;td&gt;requestedExecutionTime&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;td&gt;n.a.&lt;/td&gt; &lt;/tr&gt;     &lt;/td&gt;&lt;/tr&gt;   &lt;/table&gt;    IMPORTANT: In this API definition the following holds:   *  All data elements mentioned above are defined, but some of them are commented,      i.e. they are only visible in the source code and can be used by uncommenting them.   * Data elements which are mandatory in the table above for all payment products      are set to be mandatory in this specification.   * Data elements which are indicated in the table above as n.a. for all payment products are commented in the source code.   * Data elements which are indicated to be option, conditional or mandatory for at least one payment product      in the table above are set to be optional in the s specification except the case where all are definde to be mandatory.    * Data element which are inticated to be n.a. can be used by the ASPS if needed.      In this case uncomment tthe the relatetd lines in the source code.   * If one uses this data types for some payment products he has to ensure that the used data type is      valid according to the underlying payment product, e.g. by some appropriate validations.
 * @package  BankIO\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class PaymentInitiationJson implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'paymentInitiation_json';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'end_to_end_identification' => 'string',
        'debtor_account' => '\BankIO\Sdk\Model\AccountReference',
        'instructed_amount' => '\BankIO\Sdk\Model\Amount',
        'creditor_account' => '\BankIO\Sdk\Model\AccountReference',
        'creditor_agent' => 'string',
        'creditor_agent_name' => 'string',
        'creditor_name' => 'string',
        'creditor_address' => '\BankIO\Sdk\Model\Address',
        'remittance_information_unstructured' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'end_to_end_identification' => null,
        'debtor_account' => null,
        'instructed_amount' => null,
        'creditor_account' => null,
        'creditor_agent' => null,
        'creditor_agent_name' => null,
        'creditor_name' => null,
        'creditor_address' => null,
        'remittance_information_unstructured' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'end_to_end_identification' => 'endToEndIdentification',
        'debtor_account' => 'debtorAccount',
        'instructed_amount' => 'instructedAmount',
        'creditor_account' => 'creditorAccount',
        'creditor_agent' => 'creditorAgent',
        'creditor_agent_name' => 'creditorAgentName',
        'creditor_name' => 'creditorName',
        'creditor_address' => 'creditorAddress',
        'remittance_information_unstructured' => 'remittanceInformationUnstructured'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'end_to_end_identification' => 'setEndToEndIdentification',
        'debtor_account' => 'setDebtorAccount',
        'instructed_amount' => 'setInstructedAmount',
        'creditor_account' => 'setCreditorAccount',
        'creditor_agent' => 'setCreditorAgent',
        'creditor_agent_name' => 'setCreditorAgentName',
        'creditor_name' => 'setCreditorName',
        'creditor_address' => 'setCreditorAddress',
        'remittance_information_unstructured' => 'setRemittanceInformationUnstructured'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'end_to_end_identification' => 'getEndToEndIdentification',
        'debtor_account' => 'getDebtorAccount',
        'instructed_amount' => 'getInstructedAmount',
        'creditor_account' => 'getCreditorAccount',
        'creditor_agent' => 'getCreditorAgent',
        'creditor_agent_name' => 'getCreditorAgentName',
        'creditor_name' => 'getCreditorName',
        'creditor_address' => 'getCreditorAddress',
        'remittance_information_unstructured' => 'getRemittanceInformationUnstructured'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['end_to_end_identification'] = isset($data['end_to_end_identification']) ? $data['end_to_end_identification'] : null;
        $this->container['debtor_account'] = isset($data['debtor_account']) ? $data['debtor_account'] : null;
        $this->container['instructed_amount'] = isset($data['instructed_amount']) ? $data['instructed_amount'] : null;
        $this->container['creditor_account'] = isset($data['creditor_account']) ? $data['creditor_account'] : null;
        $this->container['creditor_agent'] = isset($data['creditor_agent']) ? $data['creditor_agent'] : null;
        $this->container['creditor_agent_name'] = isset($data['creditor_agent_name']) ? $data['creditor_agent_name'] : null;
        $this->container['creditor_name'] = isset($data['creditor_name']) ? $data['creditor_name'] : null;
        $this->container['creditor_address'] = isset($data['creditor_address']) ? $data['creditor_address'] : null;
        $this->container['remittance_information_unstructured'] = isset($data['remittance_information_unstructured']) ? $data['remittance_information_unstructured'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['end_to_end_identification']) && (mb_strlen($this->container['end_to_end_identification']) > 35)) {
            $invalidProperties[] = "invalid value for 'end_to_end_identification', the character length must be smaller than or equal to 35.";
        }

        if ($this->container['debtor_account'] === null) {
            $invalidProperties[] = "'debtor_account' can't be null";
        }
        if ($this->container['instructed_amount'] === null) {
            $invalidProperties[] = "'instructed_amount' can't be null";
        }
        if ($this->container['creditor_account'] === null) {
            $invalidProperties[] = "'creditor_account' can't be null";
        }
        if (!is_null($this->container['creditor_agent']) && !preg_match("/[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/", $this->container['creditor_agent'])) {
            $invalidProperties[] = "invalid value for 'creditor_agent', must be conform to the pattern /[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/.";
        }

        if (!is_null($this->container['creditor_agent_name']) && (mb_strlen($this->container['creditor_agent_name']) > 70)) {
            $invalidProperties[] = "invalid value for 'creditor_agent_name', the character length must be smaller than or equal to 70.";
        }

        if ($this->container['creditor_name'] === null) {
            $invalidProperties[] = "'creditor_name' can't be null";
        }
        if ((mb_strlen($this->container['creditor_name']) > 70)) {
            $invalidProperties[] = "invalid value for 'creditor_name', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['remittance_information_unstructured']) && (mb_strlen($this->container['remittance_information_unstructured']) > 140)) {
            $invalidProperties[] = "invalid value for 'remittance_information_unstructured', the character length must be smaller than or equal to 140.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets end_to_end_identification
     *
     * @return string|null
     */
    public function getEndToEndIdentification()
    {
        return $this->container['end_to_end_identification'];
    }

    /**
     * Sets end_to_end_identification
     *
     * @param string|null $end_to_end_identification end_to_end_identification
     *
     * @return $this
     */
    public function setEndToEndIdentification($end_to_end_identification)
    {
        if (!is_null($end_to_end_identification) && (mb_strlen($end_to_end_identification) > 35)) {
            throw new \InvalidArgumentException('invalid length for $end_to_end_identification when calling PaymentInitiationJson., must be smaller than or equal to 35.');
        }

        $this->container['end_to_end_identification'] = $end_to_end_identification;

        return $this;
    }

    /**
     * Gets debtor_account
     *
     * @return \BankIO\Sdk\Model\AccountReference
     */
    public function getDebtorAccount()
    {
        return $this->container['debtor_account'];
    }

    /**
     * Sets debtor_account
     *
     * @param \BankIO\Sdk\Model\AccountReference $debtor_account debtor_account
     *
     * @return $this
     */
    public function setDebtorAccount($debtor_account)
    {
        $this->container['debtor_account'] = $debtor_account;

        return $this;
    }

    /**
     * Gets instructed_amount
     *
     * @return \BankIO\Sdk\Model\Amount
     */
    public function getInstructedAmount()
    {
        return $this->container['instructed_amount'];
    }

    /**
     * Sets instructed_amount
     *
     * @param \BankIO\Sdk\Model\Amount $instructed_amount instructed_amount
     *
     * @return $this
     */
    public function setInstructedAmount($instructed_amount)
    {
        $this->container['instructed_amount'] = $instructed_amount;

        return $this;
    }

    /**
     * Gets creditor_account
     *
     * @return \BankIO\Sdk\Model\AccountReference
     */
    public function getCreditorAccount()
    {
        return $this->container['creditor_account'];
    }

    /**
     * Sets creditor_account
     *
     * @param \BankIO\Sdk\Model\AccountReference $creditor_account creditor_account
     *
     * @return $this
     */
    public function setCreditorAccount($creditor_account)
    {
        $this->container['creditor_account'] = $creditor_account;

        return $this;
    }

    /**
     * Gets creditor_agent
     *
     * @return string|null
     */
    public function getCreditorAgent()
    {
        return $this->container['creditor_agent'];
    }

    /**
     * Sets creditor_agent
     *
     * @param string|null $creditor_agent BICFI
     *
     * @return $this
     */
    public function setCreditorAgent($creditor_agent)
    {

        if (!is_null($creditor_agent) && (!preg_match("/[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/", $creditor_agent))) {
            throw new \InvalidArgumentException("invalid value for $creditor_agent when calling PaymentInitiationJson., must conform to the pattern /[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/.");
        }

        $this->container['creditor_agent'] = $creditor_agent;

        return $this;
    }

    /**
     * Gets creditor_agent_name
     *
     * @return string|null
     */
    public function getCreditorAgentName()
    {
        return $this->container['creditor_agent_name'];
    }

    /**
     * Sets creditor_agent_name
     *
     * @param string|null $creditor_agent_name Creditor agent name.
     *
     * @return $this
     */
    public function setCreditorAgentName($creditor_agent_name)
    {
        if (!is_null($creditor_agent_name) && (mb_strlen($creditor_agent_name) > 70)) {
            throw new \InvalidArgumentException('invalid length for $creditor_agent_name when calling PaymentInitiationJson., must be smaller than or equal to 70.');
        }

        $this->container['creditor_agent_name'] = $creditor_agent_name;

        return $this;
    }

    /**
     * Gets creditor_name
     *
     * @return string
     */
    public function getCreditorName()
    {
        return $this->container['creditor_name'];
    }

    /**
     * Sets creditor_name
     *
     * @param string $creditor_name Creditor name.
     *
     * @return $this
     */
    public function setCreditorName($creditor_name)
    {
        if ((mb_strlen($creditor_name) > 70)) {
            throw new \InvalidArgumentException('invalid length for $creditor_name when calling PaymentInitiationJson., must be smaller than or equal to 70.');
        }

        $this->container['creditor_name'] = $creditor_name;

        return $this;
    }

    /**
     * Gets creditor_address
     *
     * @return \BankIO\Sdk\Model\Address|null
     */
    public function getCreditorAddress()
    {
        return $this->container['creditor_address'];
    }

    /**
     * Sets creditor_address
     *
     * @param \BankIO\Sdk\Model\Address|null $creditor_address creditor_address
     *
     * @return $this
     */
    public function setCreditorAddress($creditor_address)
    {
        $this->container['creditor_address'] = $creditor_address;

        return $this;
    }

    /**
     * Gets remittance_information_unstructured
     *
     * @return string|null
     */
    public function getRemittanceInformationUnstructured()
    {
        return $this->container['remittance_information_unstructured'];
    }

    /**
     * Sets remittance_information_unstructured
     *
     * @param string|null $remittance_information_unstructured Unstructured remittance information.
     *
     * @return $this
     */
    public function setRemittanceInformationUnstructured($remittance_information_unstructured)
    {
        if (!is_null($remittance_information_unstructured) && (mb_strlen($remittance_information_unstructured) > 140)) {
            throw new \InvalidArgumentException('invalid length for $remittance_information_unstructured when calling PaymentInitiationJson., must be smaller than or equal to 140.');
        }

        $this->container['remittance_information_unstructured'] = $remittance_information_unstructured;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


