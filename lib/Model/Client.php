<?php
/**
 * Client
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  BankIO\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * bankIO NextGenPSD2 XS2A Framework
 *
 * # Summary The **NextGenPSD2** *Framework Version 1.3.6* (with errata) offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a PSD2 comlient API in addition to the elements defined in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API has to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space
 *
 * The version of the OpenAPI document: 1.3.6_2020-05-28
 * Contact: info@berlin-group.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BankIO\Sdk\Model;

use \ArrayAccess;
use \BankIO\Sdk\ObjectSerializer;

/**
 * Client Class Doc Comment
 *
 * @category Class
 * @description Client object
 * @package  BankIO\Sdk
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Client implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Client';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'client_id' => 'string',
        'redirect_uris' => 'string[]',
        'response_types' => 'string[]',
        'grant_types' => 'string[]',
        'application_type' => 'string',
        'contacts' => 'string[]',
        'client_name' => 'string',
        'logo_uri' => 'string',
        'client_uri' => 'string',
        'policy_uri' => 'string',
        'tos_uri' => 'string',
        'default_max_age' => 'int',
        'default_scopes' => 'string[]'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'client_id' => null,
        'redirect_uris' => null,
        'response_types' => null,
        'grant_types' => null,
        'application_type' => null,
        'contacts' => null,
        'client_name' => null,
        'logo_uri' => null,
        'client_uri' => null,
        'policy_uri' => null,
        'tos_uri' => null,
        'default_max_age' => 'int64',
        'default_scopes' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'client_id' => 'client_id',
        'redirect_uris' => 'redirect_uris',
        'response_types' => 'response_types',
        'grant_types' => 'grant_types',
        'application_type' => 'application_type',
        'contacts' => 'contacts',
        'client_name' => 'client_name',
        'logo_uri' => 'logo_uri',
        'client_uri' => 'client_uri',
        'policy_uri' => 'policy_uri',
        'tos_uri' => 'tos_uri',
        'default_max_age' => 'default_max_age',
        'default_scopes' => 'default_scopes'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'client_id' => 'setClientId',
        'redirect_uris' => 'setRedirectUris',
        'response_types' => 'setResponseTypes',
        'grant_types' => 'setGrantTypes',
        'application_type' => 'setApplicationType',
        'contacts' => 'setContacts',
        'client_name' => 'setClientName',
        'logo_uri' => 'setLogoUri',
        'client_uri' => 'setClientUri',
        'policy_uri' => 'setPolicyUri',
        'tos_uri' => 'setTosUri',
        'default_max_age' => 'setDefaultMaxAge',
        'default_scopes' => 'setDefaultScopes'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'client_id' => 'getClientId',
        'redirect_uris' => 'getRedirectUris',
        'response_types' => 'getResponseTypes',
        'grant_types' => 'getGrantTypes',
        'application_type' => 'getApplicationType',
        'contacts' => 'getContacts',
        'client_name' => 'getClientName',
        'logo_uri' => 'getLogoUri',
        'client_uri' => 'getClientUri',
        'policy_uri' => 'getPolicyUri',
        'tos_uri' => 'getTosUri',
        'default_max_age' => 'getDefaultMaxAge',
        'default_scopes' => 'getDefaultScopes'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    

    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['client_id'] = isset($data['client_id']) ? $data['client_id'] : null;
        $this->container['redirect_uris'] = isset($data['redirect_uris']) ? $data['redirect_uris'] : null;
        $this->container['response_types'] = isset($data['response_types']) ? $data['response_types'] : null;
        $this->container['grant_types'] = isset($data['grant_types']) ? $data['grant_types'] : null;
        $this->container['application_type'] = isset($data['application_type']) ? $data['application_type'] : null;
        $this->container['contacts'] = isset($data['contacts']) ? $data['contacts'] : null;
        $this->container['client_name'] = isset($data['client_name']) ? $data['client_name'] : null;
        $this->container['logo_uri'] = isset($data['logo_uri']) ? $data['logo_uri'] : null;
        $this->container['client_uri'] = isset($data['client_uri']) ? $data['client_uri'] : null;
        $this->container['policy_uri'] = isset($data['policy_uri']) ? $data['policy_uri'] : null;
        $this->container['tos_uri'] = isset($data['tos_uri']) ? $data['tos_uri'] : null;
        $this->container['default_max_age'] = isset($data['default_max_age']) ? $data['default_max_age'] : null;
        $this->container['default_scopes'] = isset($data['default_scopes']) ? $data['default_scopes'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['client_name'] === null) {
            $invalidProperties[] = "'client_name' can't be null";
        }
        if ($this->container['client_uri'] === null) {
            $invalidProperties[] = "'client_uri' can't be null";
        }
        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets client_id
     *
     * @return string|null
     */
    public function getClientId()
    {
        return $this->container['client_id'];
    }

    /**
     * Sets client_id
     *
     * @param string|null $client_id client_id
     *
     * @return $this
     */
    public function setClientId($client_id)
    {
        $this->container['client_id'] = $client_id;

        return $this;
    }

    /**
     * Gets redirect_uris
     *
     * @return string[]|null
     */
    public function getRedirectUris()
    {
        return $this->container['redirect_uris'];
    }

    /**
     * Sets redirect_uris
     *
     * @param string[]|null $redirect_uris redirect_uris
     *
     * @return $this
     */
    public function setRedirectUris($redirect_uris)
    {
        $this->container['redirect_uris'] = $redirect_uris;

        return $this;
    }

    /**
     * Gets response_types
     *
     * @return string[]|null
     */
    public function getResponseTypes()
    {
        return $this->container['response_types'];
    }

    /**
     * Sets response_types
     *
     * @param string[]|null $response_types response_types
     *
     * @return $this
     */
    public function setResponseTypes($response_types)
    {
        $this->container['response_types'] = $response_types;

        return $this;
    }

    /**
     * Gets grant_types
     *
     * @return string[]|null
     */
    public function getGrantTypes()
    {
        return $this->container['grant_types'];
    }

    /**
     * Sets grant_types
     *
     * @param string[]|null $grant_types grant_types
     *
     * @return $this
     */
    public function setGrantTypes($grant_types)
    {
        $this->container['grant_types'] = $grant_types;

        return $this;
    }

    /**
     * Gets application_type
     *
     * @return string|null
     */
    public function getApplicationType()
    {
        return $this->container['application_type'];
    }

    /**
     * Sets application_type
     *
     * @param string|null $application_type application_type
     *
     * @return $this
     */
    public function setApplicationType($application_type)
    {
        $this->container['application_type'] = $application_type;

        return $this;
    }

    /**
     * Gets contacts
     *
     * @return string[]|null
     */
    public function getContacts()
    {
        return $this->container['contacts'];
    }

    /**
     * Sets contacts
     *
     * @param string[]|null $contacts contacts
     *
     * @return $this
     */
    public function setContacts($contacts)
    {
        $this->container['contacts'] = $contacts;

        return $this;
    }

    /**
     * Gets client_name
     *
     * @return string
     */
    public function getClientName()
    {
        return $this->container['client_name'];
    }

    /**
     * Sets client_name
     *
     * @param string $client_name client_name
     *
     * @return $this
     */
    public function setClientName($client_name)
    {
        $this->container['client_name'] = $client_name;

        return $this;
    }

    /**
     * Gets logo_uri
     *
     * @return string|null
     */
    public function getLogoUri()
    {
        return $this->container['logo_uri'];
    }

    /**
     * Sets logo_uri
     *
     * @param string|null $logo_uri logo_uri
     *
     * @return $this
     */
    public function setLogoUri($logo_uri)
    {
        $this->container['logo_uri'] = $logo_uri;

        return $this;
    }

    /**
     * Gets client_uri
     *
     * @return string
     */
    public function getClientUri()
    {
        return $this->container['client_uri'];
    }

    /**
     * Sets client_uri
     *
     * @param string $client_uri client_uri
     *
     * @return $this
     */
    public function setClientUri($client_uri)
    {
        $this->container['client_uri'] = $client_uri;

        return $this;
    }

    /**
     * Gets policy_uri
     *
     * @return string|null
     */
    public function getPolicyUri()
    {
        return $this->container['policy_uri'];
    }

    /**
     * Sets policy_uri
     *
     * @param string|null $policy_uri policy_uri
     *
     * @return $this
     */
    public function setPolicyUri($policy_uri)
    {
        $this->container['policy_uri'] = $policy_uri;

        return $this;
    }

    /**
     * Gets tos_uri
     *
     * @return string|null
     */
    public function getTosUri()
    {
        return $this->container['tos_uri'];
    }

    /**
     * Sets tos_uri
     *
     * @param string|null $tos_uri tos_uri
     *
     * @return $this
     */
    public function setTosUri($tos_uri)
    {
        $this->container['tos_uri'] = $tos_uri;

        return $this;
    }

    /**
     * Gets default_max_age
     *
     * @return int|null
     */
    public function getDefaultMaxAge()
    {
        return $this->container['default_max_age'];
    }

    /**
     * Sets default_max_age
     *
     * @param int|null $default_max_age default_max_age
     *
     * @return $this
     */
    public function setDefaultMaxAge($default_max_age)
    {
        $this->container['default_max_age'] = $default_max_age;

        return $this;
    }

    /**
     * Gets default_scopes
     *
     * @return string[]|null
     */
    public function getDefaultScopes()
    {
        return $this->container['default_scopes'];
    }

    /**
     * Sets default_scopes
     *
     * @param string[]|null $default_scopes default_scopes
     *
     * @return $this
     */
    public function setDefaultScopes($default_scopes)
    {
        $this->container['default_scopes'] = $default_scopes;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


