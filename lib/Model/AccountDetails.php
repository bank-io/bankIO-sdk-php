<?php
/**
 * AccountDetails
 *
 * PHP version 7.2
 *
 * @category Class
 * @package  BankIO\Sdk
 * @author   bankIO
 * @link     https://bankio.co.uk/bankio-link/
 */

/**
 * bankIO NextGenPSD2 XS2A Framework
 *
 * # Summary The **NextGenPSD2** *Framework Version 1.3.6* (with errata) offers a modern, open, harmonised and interoperable set of Application Programming Interfaces (APIs) as the safest and most efficient way to provide data securely. The NextGenPSD2 Framework reduces XS2A complexity and costs, addresses the problem of multiple competing standards  in Europe and, aligned with the goals of the Euro Retail Payments Board, enables European banking customers to benefit from innovative products and services ('Banking as a Service') by granting TPPs safe and secure (authenticated and authorised) access to their bank accounts and financial data.  The possible Approaches are:   * Redirect SCA Approach   * OAuth SCA Approach   * Decoupled SCA Approach   * Embedded SCA Approach without SCA method   * Embedded SCA Approach with only one SCA method available   * Embedded SCA Approach with Selection of a SCA method    Not every message defined in this API definition is necessary for all approaches.    Furthermore this API definition does not differ between methods which are mandatory, conditional, or optional.   Therefore for a particular implementation of a Berlin Group PSD2 compliant API it is only necessary to support    a certain subset of the methods defined in this API definition.    **Please have a look at the implementation guidelines if you are not sure    which message has to be used for the approach you are going to use.**  ## Some General Remarks Related to this version of the OpenAPI Specification: * **This API definition is based on the Implementation Guidelines of the Berlin Group PSD2 API.**    It is not a replacement in any sense.   The main specification is (at the moment) always the Implementation Guidelines of the Berlin Group PSD2 API. * **This API definition contains the REST-API for requests from the PISP to the ASPSP.** * **This API definition contains the messages for all different approaches defined in the Implementation Guidelines.** * According to the OpenAPI-Specification [https://github.com/OAI/OpenAPI-Specification/blob/master/versions/3.0.1.md]        \"If in is \"header\" and the name field is \"Accept\", \"Content-Type\" or \"Authorization\", the parameter definition SHALL be ignored.\"      The element \"Accept\" will not be defined in this file at any place.      The elements \"Content-Type\" and \"Authorization\" are implicitly defined by the OpenApi tags \"content\" and \"security\".    * There are several predefined types which might occur in payment initiation messages,    but are not used in the standard JSON messages in the Implementation Guidelines.   Therefore they are not used in the corresponding messages in this file either.   We added them for the convenience of the user.   If there is a payment product, which needs these fields, one can easily use the predefined types.   But the ASPSP need not to accept them in general.    * **We omit the definition of all standard HTTP header elements (mandatory/optional/conditional)    except they are mentioned in the Implementation Guidelines.**   Therefore the implementer might add these in his own realisation of a PSD2 comlient API in addition to the elements defined in this file.     ## General Remarks on Data Types  The Berlin Group definition of UTF-8 strings in context of the PSD2 API has to support at least the following characters  a b c d e f g h i j k l m n o p q r s t u v w x y z  A B C D E F G H I J K L M N O P Q R S T U V W X Y Z  0 1 2 3 4 5 6 7 8 9  / - ? : ( ) . , ' +  Space
 *
 * The version of the OpenAPI document: 1.3.6_2020-05-28
 * Contact: info@berlin-group.org
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 5.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace BankIO\Sdk\Model;

use \ArrayAccess;
use \BankIO\Sdk\ObjectSerializer;

/**
 * AccountDetails Class Doc Comment
 *
 * @category Class
 * @description The ASPSP shall give at least one of the account reference identifiers:   - iban   - bban   - pan   - maskedPan   - msisdn If the account is a multicurrency account currency code in \&quot;currency\&quot; is set to \&quot;XXX\&quot;.
 * @package  BankIO\Sdk
 * @author   bankIO
 * @link     https://bankio.co.uk/bankio-link/
 */
class AccountDetails implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'accountDetails';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'resource_id' => 'string',
        'iban' => 'string',
        'bban' => 'string',
        'msisdn' => 'string',
        'currency' => 'string',
        'name' => 'string',
        'display_name' => 'string',
        'product' => 'string',
        'cash_account_type' => 'string',
        'status' => '\BankIO\Sdk\Model\AccountStatus',
        'bic' => 'string',
        'linked_accounts' => 'string',
        'usage' => 'string',
        'details' => 'string',
        'balances' => '\BankIO\Sdk\Model\Balance[]',
        '_links' => '\BankIO\Sdk\Model\LinksAccountDetails',
        'owner_name' => 'string'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'resource_id' => null,
        'iban' => null,
        'bban' => null,
        'msisdn' => null,
        'currency' => null,
        'name' => null,
        'display_name' => null,
        'product' => null,
        'cash_account_type' => null,
        'status' => null,
        'bic' => null,
        'linked_accounts' => null,
        'usage' => null,
        'details' => null,
        'balances' => null,
        '_links' => null,
        'owner_name' => null
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'resource_id' => 'resourceId',
        'iban' => 'iban',
        'bban' => 'bban',
        'msisdn' => 'msisdn',
        'currency' => 'currency',
        'name' => 'name',
        'display_name' => 'displayName',
        'product' => 'product',
        'cash_account_type' => 'cashAccountType',
        'status' => 'status',
        'bic' => 'bic',
        'linked_accounts' => 'linkedAccounts',
        'usage' => 'usage',
        'details' => 'details',
        'balances' => 'balances',
        '_links' => '_links',
        'owner_name' => 'ownerName'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'resource_id' => 'setResourceId',
        'iban' => 'setIban',
        'bban' => 'setBban',
        'msisdn' => 'setMsisdn',
        'currency' => 'setCurrency',
        'name' => 'setName',
        'display_name' => 'setDisplayName',
        'product' => 'setProduct',
        'cash_account_type' => 'setCashAccountType',
        'status' => 'setStatus',
        'bic' => 'setBic',
        'linked_accounts' => 'setLinkedAccounts',
        'usage' => 'setUsage',
        'details' => 'setDetails',
        'balances' => 'setBalances',
        '_links' => 'setLinks',
        'owner_name' => 'setOwnerName'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'resource_id' => 'getResourceId',
        'iban' => 'getIban',
        'bban' => 'getBban',
        'msisdn' => 'getMsisdn',
        'currency' => 'getCurrency',
        'name' => 'getName',
        'display_name' => 'getDisplayName',
        'product' => 'getProduct',
        'cash_account_type' => 'getCashAccountType',
        'status' => 'getStatus',
        'bic' => 'getBic',
        'linked_accounts' => 'getLinkedAccounts',
        'usage' => 'getUsage',
        'details' => 'getDetails',
        'balances' => 'getBalances',
        '_links' => 'getLinks',
        'owner_name' => 'getOwnerName'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const USAGE_PRIV = 'PRIV';
    const USAGE_ORGA = 'ORGA';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getUsageAllowableValues()
    {
        return [
            self::USAGE_PRIV,
            self::USAGE_ORGA,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['resource_id'] = isset($data['resource_id']) ? $data['resource_id'] : null;
        $this->container['iban'] = isset($data['iban']) ? $data['iban'] : null;
        $this->container['bban'] = isset($data['bban']) ? $data['bban'] : null;
        $this->container['msisdn'] = isset($data['msisdn']) ? $data['msisdn'] : null;
        $this->container['currency'] = isset($data['currency']) ? $data['currency'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['display_name'] = isset($data['display_name']) ? $data['display_name'] : null;
        $this->container['product'] = isset($data['product']) ? $data['product'] : null;
        $this->container['cash_account_type'] = isset($data['cash_account_type']) ? $data['cash_account_type'] : null;
        $this->container['status'] = isset($data['status']) ? $data['status'] : null;
        $this->container['bic'] = isset($data['bic']) ? $data['bic'] : null;
        $this->container['linked_accounts'] = isset($data['linked_accounts']) ? $data['linked_accounts'] : null;
        $this->container['usage'] = isset($data['usage']) ? $data['usage'] : null;
        $this->container['details'] = isset($data['details']) ? $data['details'] : null;
        $this->container['balances'] = isset($data['balances']) ? $data['balances'] : null;
        $this->container['_links'] = isset($data['_links']) ? $data['_links'] : null;
        $this->container['owner_name'] = isset($data['owner_name']) ? $data['owner_name'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if (!is_null($this->container['iban']) && !preg_match("/[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/", $this->container['iban'])) {
            $invalidProperties[] = "invalid value for 'iban', must be conform to the pattern /[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/.";
        }

        if (!is_null($this->container['bban']) && !preg_match("/[a-zA-Z0-9]{1,30}/", $this->container['bban'])) {
            $invalidProperties[] = "invalid value for 'bban', must be conform to the pattern /[a-zA-Z0-9]{1,30}/.";
        }

        if (!is_null($this->container['msisdn']) && (mb_strlen($this->container['msisdn']) > 35)) {
            $invalidProperties[] = "invalid value for 'msisdn', the character length must be smaller than or equal to 35.";
        }

        if ($this->container['currency'] === null) {
            $invalidProperties[] = "'currency' can't be null";
        }
        if (!preg_match("/[A-Z]{3}/", $this->container['currency'])) {
            $invalidProperties[] = "invalid value for 'currency', must be conform to the pattern /[A-Z]{3}/.";
        }

        if (!is_null($this->container['name']) && (mb_strlen($this->container['name']) > 70)) {
            $invalidProperties[] = "invalid value for 'name', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['display_name']) && (mb_strlen($this->container['display_name']) > 70)) {
            $invalidProperties[] = "invalid value for 'display_name', the character length must be smaller than or equal to 70.";
        }

        if (!is_null($this->container['product']) && (mb_strlen($this->container['product']) > 35)) {
            $invalidProperties[] = "invalid value for 'product', the character length must be smaller than or equal to 35.";
        }

        if (!is_null($this->container['bic']) && !preg_match("/[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/", $this->container['bic'])) {
            $invalidProperties[] = "invalid value for 'bic', must be conform to the pattern /[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/.";
        }

        if (!is_null($this->container['linked_accounts']) && (mb_strlen($this->container['linked_accounts']) > 70)) {
            $invalidProperties[] = "invalid value for 'linked_accounts', the character length must be smaller than or equal to 70.";
        }

        $allowedValues = $this->getUsageAllowableValues();
        if (!is_null($this->container['usage']) && !in_array($this->container['usage'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'usage', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        if (!is_null($this->container['usage']) && (mb_strlen($this->container['usage']) > 4)) {
            $invalidProperties[] = "invalid value for 'usage', the character length must be smaller than or equal to 4.";
        }

        if (!is_null($this->container['details']) && (mb_strlen($this->container['details']) > 500)) {
            $invalidProperties[] = "invalid value for 'details', the character length must be smaller than or equal to 500.";
        }

        if (!is_null($this->container['owner_name']) && (mb_strlen($this->container['owner_name']) > 140)) {
            $invalidProperties[] = "invalid value for 'owner_name', the character length must be smaller than or equal to 140.";
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets resource_id
     *
     * @return string|null
     */
    public function getResourceId()
    {
        return $this->container['resource_id'];
    }

    /**
     * Sets resource_id
     *
     * @param string|null $resource_id This shall be filled, if addressable resource are created by the ASPSP on the /accounts or /card-accounts endpoint.
     *
     * @return $this
     */
    public function setResourceId($resource_id)
    {
        $this->container['resource_id'] = $resource_id;

        return $this;
    }

    /**
     * Gets iban
     *
     * @return string|null
     */
    public function getIban()
    {
        return $this->container['iban'];
    }

    /**
     * Sets iban
     *
     * @param string|null $iban IBAN of an account.
     *
     * @return $this
     */
    public function setIban($iban)
    {

        if (!is_null($iban) && (!preg_match("/[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/", $iban))) {
            throw new \InvalidArgumentException("invalid value for $iban when calling AccountDetails., must conform to the pattern /[A-Z]{2,2}[0-9]{2,2}[a-zA-Z0-9]{1,30}/.");
        }

        $this->container['iban'] = $iban;

        return $this;
    }

    /**
     * Gets bban
     *
     * @return string|null
     */
    public function getBban()
    {
        return $this->container['bban'];
    }

    /**
     * Sets bban
     *
     * @param string|null $bban Basic Bank Account Number (BBAN) Identifier.  This data element can be used in the body of the consent request.   Message for retrieving account access consent from this account. This   data elements is used for payment accounts which have no IBAN.   ISO20022: Basic Bank Account Number (BBAN).       Identifier used nationally by financial institutions, i.e., in individual countries,    generally as part of a National Account Numbering Scheme(s),    which uniquely identifies the account of a customer.
     *
     * @return $this
     */
    public function setBban($bban)
    {

        if (!is_null($bban) && (!preg_match("/[a-zA-Z0-9]{1,30}/", $bban))) {
            throw new \InvalidArgumentException("invalid value for $bban when calling AccountDetails., must conform to the pattern /[a-zA-Z0-9]{1,30}/.");
        }

        $this->container['bban'] = $bban;

        return $this;
    }

    /**
     * Gets msisdn
     *
     * @return string|null
     */
    public function getMsisdn()
    {
        return $this->container['msisdn'];
    }

    /**
     * Sets msisdn
     *
     * @param string|null $msisdn Mobile phone number.
     *
     * @return $this
     */
    public function setMsisdn($msisdn)
    {
        if (!is_null($msisdn) && (mb_strlen($msisdn) > 35)) {
            throw new \InvalidArgumentException('invalid length for $msisdn when calling AccountDetails., must be smaller than or equal to 35.');
        }

        $this->container['msisdn'] = $msisdn;

        return $this;
    }

    /**
     * Gets currency
     *
     * @return string
     */
    public function getCurrency()
    {
        return $this->container['currency'];
    }

    /**
     * Sets currency
     *
     * @param string $currency ISO 4217 Alpha 3 currency code.
     *
     * @return $this
     */
    public function setCurrency($currency)
    {

        if ((!preg_match("/[A-Z]{3}/", $currency))) {
            throw new \InvalidArgumentException("invalid value for $currency when calling AccountDetails., must conform to the pattern /[A-Z]{3}/.");
        }

        $this->container['currency'] = $currency;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name Name of the account, as assigned by the ASPSP, in agreement with the account owner in order to provide an additional means of identification of the account.
     *
     * @return $this
     */
    public function setName($name)
    {
        if (!is_null($name) && (mb_strlen($name) > 70)) {
            throw new \InvalidArgumentException('invalid length for $name when calling AccountDetails., must be smaller than or equal to 70.');
        }

        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets display_name
     *
     * @return string|null
     */
    public function getDisplayName()
    {
        return $this->container['display_name'];
    }

    /**
     * Sets display_name
     *
     * @param string|null $display_name Name of the account as defined by the PSU within online channels.
     *
     * @return $this
     */
    public function setDisplayName($display_name)
    {
        if (!is_null($display_name) && (mb_strlen($display_name) > 70)) {
            throw new \InvalidArgumentException('invalid length for $display_name when calling AccountDetails., must be smaller than or equal to 70.');
        }

        $this->container['display_name'] = $display_name;

        return $this;
    }

    /**
     * Gets product
     *
     * @return string|null
     */
    public function getProduct()
    {
        return $this->container['product'];
    }

    /**
     * Sets product
     *
     * @param string|null $product Product name of the bank for this account, proprietary definition.
     *
     * @return $this
     */
    public function setProduct($product)
    {
        if (!is_null($product) && (mb_strlen($product) > 35)) {
            throw new \InvalidArgumentException('invalid length for $product when calling AccountDetails., must be smaller than or equal to 35.');
        }

        $this->container['product'] = $product;

        return $this;
    }

    /**
     * Gets cash_account_type
     *
     * @return string|null
     */
    public function getCashAccountType()
    {
        return $this->container['cash_account_type'];
    }

    /**
     * Sets cash_account_type
     *
     * @param string|null $cash_account_type ExternalCashAccountType1Code from ISO 20022.
     *
     * @return $this
     */
    public function setCashAccountType($cash_account_type)
    {
        $this->container['cash_account_type'] = $cash_account_type;

        return $this;
    }

    /**
     * Gets status
     *
     * @return \BankIO\Sdk\Model\AccountStatus|null
     */
    public function getStatus()
    {
        return $this->container['status'];
    }

    /**
     * Sets status
     *
     * @param \BankIO\Sdk\Model\AccountStatus|null $status status
     *
     * @return $this
     */
    public function setStatus($status)
    {
        $this->container['status'] = $status;

        return $this;
    }

    /**
     * Gets bic
     *
     * @return string|null
     */
    public function getBic()
    {
        return $this->container['bic'];
    }

    /**
     * Sets bic
     *
     * @param string|null $bic BICFI
     *
     * @return $this
     */
    public function setBic($bic)
    {

        if (!is_null($bic) && (!preg_match("/[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/", $bic))) {
            throw new \InvalidArgumentException("invalid value for $bic when calling AccountDetails., must conform to the pattern /[A-Z]{6,6}[A-Z2-9][A-NP-Z0-9]([A-Z0-9]{3,3}){0,1}/.");
        }

        $this->container['bic'] = $bic;

        return $this;
    }

    /**
     * Gets linked_accounts
     *
     * @return string|null
     */
    public function getLinkedAccounts()
    {
        return $this->container['linked_accounts'];
    }

    /**
     * Sets linked_accounts
     *
     * @param string|null $linked_accounts Case of a set of pending card transactions, the APSP will provide the relevant cash account the card is set up on.
     *
     * @return $this
     */
    public function setLinkedAccounts($linked_accounts)
    {
        if (!is_null($linked_accounts) && (mb_strlen($linked_accounts) > 70)) {
            throw new \InvalidArgumentException('invalid length for $linked_accounts when calling AccountDetails., must be smaller than or equal to 70.');
        }

        $this->container['linked_accounts'] = $linked_accounts;

        return $this;
    }

    /**
     * Gets usage
     *
     * @return string|null
     */
    public function getUsage()
    {
        return $this->container['usage'];
    }

    /**
     * Sets usage
     *
     * @param string|null $usage Specifies the usage of the account:   * PRIV: private personal account   * ORGA: professional account
     *
     * @return $this
     */
    public function setUsage($usage)
    {
        $allowedValues = $this->getUsageAllowableValues();
        if (!is_null($usage) && !in_array($usage, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'usage', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        if (!is_null($usage) && (mb_strlen($usage) > 4)) {
            throw new \InvalidArgumentException('invalid length for $usage when calling AccountDetails., must be smaller than or equal to 4.');
        }

        $this->container['usage'] = $usage;

        return $this;
    }

    /**
     * Gets details
     *
     * @return string|null
     */
    public function getDetails()
    {
        return $this->container['details'];
    }

    /**
     * Sets details
     *
     * @param string|null $details Specifications that might be provided by the ASPSP:   - characteristics of the account   - characteristics of the relevant card
     *
     * @return $this
     */
    public function setDetails($details)
    {
        if (!is_null($details) && (mb_strlen($details) > 500)) {
            throw new \InvalidArgumentException('invalid length for $details when calling AccountDetails., must be smaller than or equal to 500.');
        }

        $this->container['details'] = $details;

        return $this;
    }

    /**
     * Gets balances
     *
     * @return \BankIO\Sdk\Model\Balance[]|null
     */
    public function getBalances()
    {
        return $this->container['balances'];
    }

    /**
     * Sets balances
     *
     * @param \BankIO\Sdk\Model\Balance[]|null $balances A list of balances regarding this account, e.g. the current balance, the last booked balance. The list might be restricted to the current balance.
     *
     * @return $this
     */
    public function setBalances($balances)
    {
        $this->container['balances'] = $balances;

        return $this;
    }

    /**
     * Gets _links
     *
     * @return \BankIO\Sdk\Model\LinksAccountDetails|null
     */
    public function getLinks()
    {
        return $this->container['_links'];
    }

    /**
     * Sets _links
     *
     * @param \BankIO\Sdk\Model\LinksAccountDetails|null $_links _links
     *
     * @return $this
     */
    public function setLinks($_links)
    {
        $this->container['_links'] = $_links;

        return $this;
    }

    /**
     * Gets owner_name
     *
     * @return string|null
     */
    public function getOwnerName()
    {
        return $this->container['owner_name'];
    }

    /**
     * Sets owner_name
     *
     * @param string|null $owner_name Name of the legal account owner.  If there is more than one owner, then e.g. two names might be noted here.  For a corporate account, the corporate name is used for this attribute. Even if supported by the ASPSP, the provision of this field might depend on the fact whether an explicit consent to this specific additional account information has been given by the PSU.
     *
     * @return $this
     */
    public function setOwnerName($owner_name)
    {
        if (!is_null($owner_name) && (mb_strlen($owner_name) > 140)) {
            throw new \InvalidArgumentException('invalid length for $owner_name when calling AccountDetails., must be smaller than or equal to 140.');
        }

        $this->container['owner_name'] = $owner_name;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }

    /**
     * Gets a header-safe presentation of the object
     *
     * @return string
     */
    public function toHeaderValue()
    {
        return json_encode(ObjectSerializer::sanitizeForSerialization($this));
    }
}


